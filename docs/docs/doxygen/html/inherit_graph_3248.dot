digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="llvm::iterator_facade\l_base\< GSIHashIterator,\l std::random_access_iterator\l_tag, const uint32_t, typename\l std::iterator_traits\< FixedStreamArray\lIterator\< PSHashRecord \> \>::difference\l_type, std::conditional_t\< std::is_same\l\< const uint32_t, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord\l \> \>::value_type \>::value, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord\l \> \>::pointer, const uint32_t * \>, std::conditional\l_t\< std::is_same\< const uint32_t, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord \> \>::value\l_type \>::value, typename std::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::reference, const uint32_t & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::iterator_adaptor\l_base\< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::pdb::GSIHashIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pdb_1_1GSIHashIterator.html",tooltip="Iterator over hash records producing symbol record offsets."];
}
