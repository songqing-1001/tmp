digraph "llvm::pointer_iterator&lt; WrappedIteratorT, T &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::pointer_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< pointer_iterator\l\< WrappedIteratorT, decltype\l(&*std::declval\< WrappedIteratorT\l \>()) \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category, decltype(&*std\l::declval\< WrappedIteratorT \>()) \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="iterator_facade_base\l\< pointer_iterator\< Wrapped\lIteratorT, decltype(&*std\l::declval\< WrappedIteratorT\l \>()) \> , std::iterator_traits\l\< WrappedIteratorT \>::iterator\l_category , decltype(&*::\< \> WrappedIterator\lT , typename std::iterator_traits\<WrappedIteratorT\>\l::difference_type , std::conditional_t\<     \l   std::is_same\<decltype(&*::\< \> WrappedIteratorT\l , typename std::iterator_traits\<               \l             WrappedIteratorT\>::value_type\>::value,\l        typename std::iterator_traits\<WrappedIteratorT\>\l::pointer, decltype(&*::\< \> WrappedIteratorT  *\> , std\l::conditional_t\<        std::is_same\<decltype(&*::\< \> WrappedIteratorT\l , typename std::iterator_traits\<                            WrappedIteratorT\>\l::value_type\>::value,        typename std::iterator_traits\<WrappedIteratorT\>\l::reference, decltype(&*::\< \> WrappedIteratorT  &\>  \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node4 [label="WrappedIteratorT",height=0.2,width=0.4,color="black",URL="$classWrappedIteratorT.html",tooltip=" "];
  Node5 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< pointer_iterator\l\< WrappedIteratorT,\l decltype(&*std::declval\l\< WrappedIteratorT \>())\l \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIterator\lT \>::iterator_category, decltype\l(&*std::declval\< WrappedIteratorT \>()) \>" ,fontname="Helvetica"];
  Node5 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node7 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node7 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node4 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
}
