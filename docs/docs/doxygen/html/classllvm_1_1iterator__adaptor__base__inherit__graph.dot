digraph "llvm::iterator_adaptor_base&lt; DerivedT, WrappedIteratorT, IteratorCategoryT, T, DifferenceTypeT, PointerT, ReferenceT &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::pointee_iterator\l\< pointee_iterator\< WrappedIterator\lT, std::remove_reference_t\< decltype\l( **std::declval\< WrappedIteratorT\l \>())\> \>, WrappedIteratorT, std::iterator\l_traits\< WrappedIteratorT \>::iterator_category,\l std::remove_reference_t\< decltype( **std::declval\l\< WrappedIteratorT \>())\> \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1pointee__iterator.html",tooltip="An iterator type that allows iterating over the pointees via some other iterator."];
  Node1 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, Value\l *, ptrdiff_t, Value *, Value * \>" ,fontname="Helvetica"];
  Node5 [label="llvm::iterator_adaptor\l_base\< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, Value\l *, ptrdiff_t, Value *, Value * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::User::value_op\l_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1User_1_1value__op__iterator.html",tooltip="Iterator for directly iterating over the operand Values."];
  Node1 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< NeighborEdgeIteratorT\l\< IsConst, IsOut \>, typename\l NeighborSetT::const_iterator,\l std::iterator_traits\< typename\l NeighborSetT::const_iterator \>\l::iterator_category, std::conditional\l_t\< IsConst, const EdgeValueType, EdgeValueType \> \>" ,fontname="Helvetica"];
  Node7 [label="llvm::iterator_adaptor\l_base\< NeighborEdgeIteratorT\l\< IsConst, IsOut \>, typename\l NeighborSetT::const_iterator,\l std::iterator_traits\< typename\l NeighborSetT::const_iterator \>\l::iterator_category, std::conditional\l_t\< IsConst, const EdgeValueType, EdgeValueType \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< AACallEdgeIterator,\l SetVector\< Function\l * \>::iterator \>" ,fontname="Helvetica"];
  Node8 [label="llvm::iterator_adaptor\l_base\< AACallEdgeIterator,\l SetVector\< Function * \>\l::iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::AACallEdgeIterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AACallEdgeIterator.html",tooltip="An Iterator for call edges, creates AACallEdges attributes in a lazy way."];
  Node1 -> Node10 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DbgAssignIt, Value\l::user_iterator, std\l::iterator_traits\< Value\l::user_iterator \>::iterator\l_category, DbgAssignIntrinsic\l *, std::ptrdiff_t, DbgAssignIntrinsic\l **, DbgAssignIntrinsic *& \>" ,fontname="Helvetica"];
  Node10 [label="llvm::iterator_adaptor\l_base\< DbgAssignIt, Value\l::user_iterator, std::iterator\l_traits\< Value::user_iterator\l \>::iterator_category, DbgAssignIntrinsic\l *, std::ptrdiff_t, DbgAssignIntrinsic\l **, DbgAssignIntrinsic *& \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::at::DbgAssignIt",height=0.2,width=0.4,color="black",URL="$classllvm_1_1at_1_1DbgAssignIt.html",tooltip="High level: this is an iterator for llvm.dbg.assign intrinsics."];
  Node1 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, IterTag \>, WrappedIteratorT,\l std::common_type_t\< IterTag,\l std::iterator_traits\< WrappedIteratorT\l \>::iterator_category \> \>" ,fontname="Helvetica"];
  Node12 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l WrappedIteratorT, std::common\l_type_t\< IterTag, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip="An iterator adaptor that filters the elements of given inner iterators."];
  Node13 -> Node14 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>" ,fontname="Helvetica"];
  Node14 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node13 -> Node16 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>" ,fontname="Helvetica"];
  Node16 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node1 -> Node18 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< pointer_iterator\l\< WrappedIteratorT,\l decltype(&*std::declval\l\< WrappedIteratorT \>())\l \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIterator\lT \>::iterator_category, decltype\l(&*std::declval\< WrappedIteratorT \>()) \>" ,fontname="Helvetica"];
  Node18 [label="llvm::iterator_adaptor\l_base\< pointer_iterator\l\< WrappedIteratorT, decltype\l(&*std::declval\< WrappedIteratorT\l \>()) \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category, decltype(&*std\l::declval\< WrappedIteratorT \>()) \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="llvm::pointer_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1pointer__iterator.html",tooltip=" "];
  Node1 -> Node20 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, std::bidirectional_iterator\l_tag \>, WrappedIteratorT, std\l::common_type_t\< std::bidirectional\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \> \>" ,fontname="Helvetica"];
  Node20 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>, WrappedIteratorT,\l std::common_type_t\< std::bidirectional\l_iterator_tag, std::iterator_traits\<\l WrappedIteratorT \>::iterator_category \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node20 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node21 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< ImmutableMap \>, ImmutableMap\l ::TreeTy::iterator, std::iterator\l_traits\< ImmutableMap ::TreeTy::\literator \>::iterator_category, const\l ImmutableMap ::value_type \>" ,fontname="Helvetica"];
  Node21 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< ImmutableMap \>, ImmutableMap\l ::TreeTy::iterator, std::iterator\l_traits\< ImmutableMap ::TreeTy::iterator\l \>::iterator_category, const ImmutableMap\l ::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="llvm::ImutAVLValueIterator\l\< ImmutableMap \>",height=0.2,width=0.4,color="red",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip=" "];
  Node1 -> Node24 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, std::forward_iterator_tag\l \>, WrappedIteratorT, std::common\l_type_t\< std::forward_iterator_tag,\l std::iterator_traits\< WrappedIteratorT\l \>::iterator_category \> \>" ,fontname="Helvetica"];
  Node24 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>, WrappedIteratorT,\l std::common_type_t\< std::forward\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node24 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 -> Node25 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< call_iterator, VectorImpl\lT::iterator, std::forward\l_iterator_tag \>" ,fontname="Helvetica"];
  Node25 [label="llvm::iterator_adaptor\l_base\< call_iterator,\l VectorImplT::iterator,\l std::forward_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="llvm::LazyCallGraph\l::EdgeSequence::call\l_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LazyCallGraph_1_1EdgeSequence_1_1call__iterator.html",tooltip="An iterator over specifically call edges."];
  Node1 -> Node27 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ChildIteratorType,\l SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>" ,fontname="Helvetica"];
  Node27 [label="llvm::iterator_adaptor\l_base\< ChildIteratorType,\l SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node27 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="llvm::GraphTraits\<\l BoUpSLP * \>::ChildIteratorType",height=0.2,width=0.4,color="black",URL="$structllvm_1_1GraphTraits_3_01BoUpSLP_01_5_01_4_1_1ChildIteratorType.html",tooltip="Add the VectorizableTree to the index iterator to be able to return TreeEntry pointers."];
  Node1 -> Node29 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< pointee_iterator\l\< WrappedIteratorT,\l std::remove_reference\l_t\< decltype( **std::declval\l\< WrappedIteratorT \>())\> \>,\l WrappedIteratorT, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category, std::remove_reference_t\l\< decltype( **std::declval\< WrappedIteratorT \>())\> \>" ,fontname="Helvetica"];
  Node29 [label="llvm::iterator_adaptor\l_base\< pointee_iterator\l\< WrappedIteratorT, std\l::remove_reference_t\< decltype\l(**std::declval\< WrappedIteratorT\l \>())\> \>, WrappedIteratorT, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category, std::remove\l_reference_t\< decltype(**std::declval\l\< WrappedIteratorT \>())\> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node30 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_toplevel_iterator,\l const_toplevel_iterator_base \>" ,fontname="Helvetica"];
  Node30 [label="llvm::iterator_adaptor\l_base\< const_toplevel\l_iterator, const_toplevel\l_iterator_base \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node30 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="llvm::GenericCycleInfo\l\< ContextT \>::const_toplevel\l_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1GenericCycleInfo_1_1const__toplevel__iterator.html",tooltip=" "];
  Node1 -> Node32 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_symbol_iterator,\l SymbolMapType::const\l_iterator, std::forward\l_iterator_tag, const Symbol\l *, ptrdiff_t, const Symbol\l *, const Symbol * \>" ,fontname="Helvetica"];
  Node32 [label="llvm::iterator_adaptor\l_base\< const_symbol_iterator,\l SymbolMapType::const_iterator,\l std::forward_iterator_tag, const\l Symbol *, ptrdiff_t, const Symbol\l *, const Symbol * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node32 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="llvm::MachO::InterfaceFile\l::const_symbol_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1MachO_1_1InterfaceFile_1_1const__symbol__iterator.html",tooltip=" "];
  Node1 -> Node34 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< succ_op_iterator,\l value_op_iterator,\l std::random_access_iterator\l_tag, BasicBlock *, ptrdiff\l_t, BasicBlock *, BasicBlock * \>" ,fontname="Helvetica"];
  Node34 [label="llvm::iterator_adaptor\l_base\< succ_op_iterator,\l value_op_iterator, std\l::random_access_iterator\l_tag, BasicBlock *, ptrdiff\l_t, BasicBlock *, BasicBlock * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node34 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="llvm::BranchInst::succ\l_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1BranchInst_1_1succ__op__iterator.html",tooltip="Iterator type that casts an operand to a basic block."];
  Node34 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="llvm::IndirectBrInst\l::succ_op_iterator",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IndirectBrInst_1_1succ__op__iterator.html",tooltip="Iterator type that casts an operand to a basic block."];
  Node1 -> Node37 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< IteratorImpl\< ValueT,\l IteratorBase \>, IteratorBase,\l std::bidirectional_iterator\l_tag, ValueT \>" ,fontname="Helvetica"];
  Node37 [label="llvm::iterator_adaptor\l_base\< IteratorImpl\< ValueT,\l IteratorBase \>, IteratorBase,\l std::bidirectional_iterator\l_tag, ValueT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node38 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_iterator, ListTy\l::iterator, std::forward\l_iterator_tag, DIEValue \>" ,fontname="Helvetica"];
  Node38 [label="llvm::iterator_adaptor\l_base\< value_iterator,\l ListTy::iterator, std\l::forward_iterator_tag,\l DIEValue \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node38 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="llvm::DIEValueList\l::value_iterator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DIEValueList_1_1value__iterator.html",tooltip=" "];
  Node1 -> Node40 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, SDValue,\l ptrdiff_t, value_op_iterator\l *, value_op_iterator * \>" ,fontname="Helvetica"];
  Node40 [label="llvm::iterator_adaptor\l_base\< value_op_iterator,\l op_iterator, std::random\l_access_iterator_tag, SDValue,\l ptrdiff_t, value_op_iterator\l *, value_op_iterator * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node42 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, ItTy, std\l::iterator_traits\< ItTy\l \>::iterator_category,\l std::remove_reference_t\l\< ReferenceTy \>, std::iterator\l_traits\< ItTy \>::difference_type,\l std::remove_reference_t\< ReferenceTy\l \> *, ReferenceTy \>" ,fontname="Helvetica"];
  Node42 [label="llvm::iterator_adaptor\l_base\< DerivedT, ItTy,\l std::iterator_traits\<\l ItTy \>::iterator_category,\l std::remove_reference_t\<\l ReferenceTy \>, std::iterator\l_traits\< ItTy \>::difference_type,\l std::remove_reference_t\< ReferenceTy\l \> *, ReferenceTy \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node44 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, VectorImplT\l::iterator, std::forward\l_iterator_tag \>" ,fontname="Helvetica"];
  Node44 [label="llvm::iterator_adaptor\l_base\< iterator, VectorImplT\l::iterator, std::forward_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node46 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_value_op_iterator,\l const_op_iterator, std\l::random_access_iterator\l_tag, const Value *, ptrdiff\l_t, const Value *, const Value * \>" ,fontname="Helvetica"];
  Node46 [label="llvm::iterator_adaptor\l_base\< const_value_op\l_iterator, const_op_iterator,\l std::random_access_iterator\l_tag, const Value *, ptrdiff\l_t, const Value *, const Value * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node48 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< ImmutableMapRef \>, Immutable\lMapRef ::TreeTy::iterator,\l std::iterator_traits\< ImmutableMapRef\l ::TreeTy::iterator \>::iterator_category,\l const ImmutableMapRef ::value_type \>" ,fontname="Helvetica"];
  Node48 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< ImmutableMapRef \>, ImmutableMapRef\l ::TreeTy::iterator, std::iterator\l_traits\< ImmutableMapRef ::TreeTy\l::iterator \>::iterator_category, const\l ImmutableMapRef ::value_type \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node51 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< early_inc_iterator\l_impl\< WrappedIteratorT\l \>, WrappedIteratorT, std\l::input_iterator_tag \>" ,fontname="Helvetica"];
  Node51 [label="llvm::iterator_adaptor\l_base\< early_inc_iterator\l_impl\< WrappedIteratorT \>\l, WrappedIteratorT, std::input\l_iterator_tag \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node53 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< mapped_iterator\<\l ItTy, FuncTy \>, ItTy,\l std::iterator_traits\l\< ItTy \>::iterator_category,\l std::remove_reference_t\<\l decltype(std::declval\< FuncTy\l \>()(*std::declval\< ItTy \>()))\l \>, std::iterator_traits\< ItTy\l \>::difference_type, std::remove\l_reference_t\< decltype(std::declval\l\< FuncTy \>()(*std::declval\< ItTy \>\l())) \> *, decltype(std::declval\< FuncTy\l \>()(*std::declval\< ItTy \>())) \>" ,fontname="Helvetica"];
  Node53 [label="llvm::iterator_adaptor\l_base\< mapped_iterator\l\< ItTy, FuncTy \>, ItTy,\l std::iterator_traits\< ItTy\l \>::iterator_category, std\l::remove_reference_t\< decltype\l(std::declval\< FuncTy \>()(*std\l::declval\< ItTy \>())) \>, std::iterator\l_traits\< ItTy \>::difference_type, std\l::remove_reference_t\< decltype(std::declval\l\< FuncTy \>()(*std::declval\< ItTy \>())) \> *,\l decltype(std::declval\< FuncTy \>()(*std::declval\l\< ItTy \>())) \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node55 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_child_iterator,\l const_child_iterator\l_base \>" ,fontname="Helvetica"];
  Node55 [label="llvm::iterator_adaptor\l_base\< const_child_iterator,\l const_child_iterator_base \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node57 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T\l::TreeTy::iterator \>::iterator\l_category, const T::value_type \>" ,fontname="Helvetica"];
  Node57 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node59 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_value_iterator,\l ListTy::const_iterator,\l std::forward_iterator_tag,\l const DIEValue \>" ,fontname="Helvetica"];
  Node59 [label="llvm::iterator_adaptor\l_base\< const_value_iterator,\l ListTy::const_iterator, std\l::forward_iterator_tag, const\l DIEValue \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node61 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>" ,fontname="Helvetica"];
  Node61 [label="llvm::iterator_adaptor\l_base\< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node63 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedSuccIterator,\l succ_iterator, std::\literator_traits\< succ\l_iterator \>::iterator_category,\l NodeRef, std::ptrdiff_t, NodeRef\l *, NodeRef \>" ,fontname="Helvetica"];
  Node63 [label="llvm::iterator_adaptor\l_base\< WrappedSuccIterator,\l succ_iterator, std::iterator\l_traits\< succ_iterator \>::iterator\l_category, NodeRef, std::ptrdiff\l_t, NodeRef *, NodeRef \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node65 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const_succ_op_iterator,\l const_value_op_iterator,\l std::random_access_iterator\l_tag, const BasicBlock *, ptrdiff\l_t, const BasicBlock *, const BasicBlock * \>" ,fontname="Helvetica"];
  Node65 [label="llvm::iterator_adaptor\l_base\< const_succ_op_iterator,\l const_value_op_iterator, std\l::random_access_iterator_tag,\l const BasicBlock *, ptrdiff_t,\l const BasicBlock *, const BasicBlock * \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
}
