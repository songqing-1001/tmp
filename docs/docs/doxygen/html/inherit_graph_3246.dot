digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="llvm::iterator_facade\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>, std::common\l_type_t\< std::forward_iterator\l_tag, std::iterator_traits\< WrappedIterator\lT \>::iterator_category \>, typename std\l::iterator_traits\< WrappedIteratorT \>::\lvalue_type, typename std::iterator_traits\l\< WrappedIteratorT \>::difference_type, std\l::conditional_t\< std::is_same\< typename std\l::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\l\< WrappedIteratorT \>::pointer, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type * \>, std::conditional\l_t\< std::is_same\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>, WrappedIteratorT,\l std::common_type_t\< std::forward\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::forward\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::filter_iterator\l_impl\< WrappedIteratorT,\l PredicateT, IterTag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__impl.html",tooltip="Specialization of filter_iterator_base for forward iteration only."];
}
