digraph "llvm::LazyCallGraph::EdgeSequence::iterator"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::LazyCallGraph\l::EdgeSequence::iterator",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An iterator used for the edges to both entry nodes and child nodes."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< iterator, VectorImplT\l::iterator, std::forward_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< iterator, std\l::forward_iterator_tag,\l typename std::iterator\l_traits\< VectorImplT::iterator\l \>::value_type, typename std\l::iterator_traits\< VectorImplT\l::iterator \>::difference_type,\l std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< VectorImplT\l::iterator \>::value_type, typename std::\literator_traits\< VectorImplT::iterator \>\l::value_type \>::value, typename std::iterator\l_traits\< VectorImplT::iterator \>::pointer, typename\l std::iterator_traits\< VectorImplT::iterator \>::value\l_type * \>, std::conditional_t\< std::is_same\< typename\l std::iterator_traits\< VectorImplT::iterator \>::value\l_type, typename std::iterator_traits\< VectorImplT::iterator\l \>::value_type \>::value, typename std::iterator_traits\< VectorImplT\l::iterator \>::reference, typename std::iterator_traits\< VectorImplT\l::iterator \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, std::forward\l_iterator_tag, typename\l std::iterator_traits\< VectorImpl\lT::iterator \>::value_type, typename\l std::iterator_traits\< VectorImplT\l::iterator \>::difference_type, std\l::conditional_t\< std::is_same\< typename\l std::iterator_traits\< VectorImplT::iterator\l \>::value_type, typename std::iterator_traits\l\< VectorImplT::iterator \>::value_type \>::value,\l typename std::iterator_traits\< VectorImplT::iterator\l \>::pointer, typename std::iterator_traits\< VectorImplT\l::iterator \>::value_type * \>, std::conditional_t\< std\l::is_same\< typename std::iterator_traits\< VectorImplT::\literator \>::value_type, typename std::iterator_traits\< VectorImplT\l::iterator \>::value_type \>::value, typename std::iterator_traits\l\< VectorImplT::iterator \>::reference, typename std::iterator_traits\l\< VectorImplT::iterator \>::value_type & \> \>" ,fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, VectorImplT\l::iterator, std::forward\l_iterator_tag \>" ,fontname="Helvetica"];
  Node5 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
}
