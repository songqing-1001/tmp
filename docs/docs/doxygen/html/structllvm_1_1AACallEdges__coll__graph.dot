digraph "llvm::AACallEdges"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::AACallEdges",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An abstract state for querying live call edges."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::StateWrapper\l\< BooleanState, AbstractAttribute \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1StateWrapper.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::AbstractAttribute",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AbstractAttribute.html",tooltip="Base struct for all \"concrete attribute\" deductions."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::IRPosition",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IRPosition.html",tooltip="Helper to describe and deal with positions in the LLVM-IR."];
  Node5 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" TombstoneKey\nEmptyKey" ,fontname="Helvetica"];
  Node5 [label="const",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::AADepGraphNode",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AADepGraphNode.html",tooltip="}"];
  Node7 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Deps" ,fontname="Helvetica"];
  Node7 [label="llvm::SmallSetVector\l\< DepTy, 2 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallSetVector.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::SetVector\< DepTy,\l SmallVector\< DepTy, N\l \>, SmallDenseSet\< DepTy, N \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SetVector.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DepTy, SmallVector\l\< DepTy, N \>, SmallDenseSet\l\< DepTy, N \> \>" ,fontname="Helvetica"];
  Node9 [label="llvm::SetVector\< T,\l Vector, Set \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SetVector.html",tooltip="A vector that has set insertion semantics."];
  Node10 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DepTy, 2 \>" ,fontname="Helvetica"];
  Node10 [label="llvm::SmallSetVector\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallSetVector.html",tooltip="A SetVector that performs no allocations if smaller than a certain size."];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::SetVector\< T,\l SmallVector\< T, N \>\l, SmallDenseSet\< T, N \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SetVector.html",tooltip=" "];
  Node9 -> Node11 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T, SmallVector\< T,\l N \>, SmallDenseSet\l\< T, N \> \>" ,fontname="Helvetica"];
  Node12 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::BooleanState",height=0.2,width=0.4,color="black",URL="$structllvm_1_1BooleanState.html",tooltip="Simple wrapper for a single bit (boolean) state."];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::IntegerStateBase\l\< bool, true, false \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IntegerStateBase.html",tooltip=" "];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::AbstractState",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AbstractState.html",tooltip="An interface to query the internal state of an abstract attribute."];
  Node15 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Assumed\nKnown" ,fontname="Helvetica"];
  Node15 [label="bool",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node16 -> Node13 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< bool, true, false \>" ,fontname="Helvetica"];
  Node16 [label="llvm::IntegerStateBase\l\< base_ty, BestState,\l WorstState \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1IntegerStateBase.html",tooltip="Simple state with integers encoding."];
  Node14 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 -> Node16 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Assumed\nKnown" ,fontname="Helvetica"];
  Node17 [label="base_ty",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node18 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BooleanState, Abstract\lAttribute \>" ,fontname="Helvetica"];
  Node18 [label="llvm::StateWrapper\l\< StateTy, BaseType, Ts \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1StateWrapper.html",tooltip="Helper to tie a abstract state implementation to an abstract attribute."];
  Node19 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="BaseType",height=0.2,width=0.4,color="black",URL="$classBaseType.html",tooltip=" "];
  Node20 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="StateTy",height=0.2,width=0.4,color="black",URL="$classStateTy.html",tooltip=" "];
  Node21 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="llvm::AACallGraphNode",height=0.2,width=0.4,color="black",URL="$structllvm_1_1AACallGraphNode.html",tooltip=" "];
  Node22 -> Node21 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" A" ,fontname="Helvetica"];
  Node22 [label="llvm::Attributor",height=0.2,width=0.4,color="black",URL="$structllvm_1_1Attributor.html",tooltip="The fixpoint analysis framework that orchestrates the attribute deduction."];
  Node23 -> Node22 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Allocator" ,fontname="Helvetica"];
  Node23 [label="llvm::BumpPtrAllocatorImpl\l\< AllocatorT, SlabSize,\l SizeThreshold, GrowthDelay \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BumpPtrAllocatorImpl.html",tooltip="Allocate memory in an ever growing pool, as if by bump-pointer."];
  Node24 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="llvm::AllocatorBase\l\< BumpPtrAllocatorImpl\l\< MallocAllocator, 4096,\l 4096, 128 \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AllocatorBase.html",tooltip=" "];
  Node25 -> Node24 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BumpPtrAllocatorImpl\l\< MallocAllocator, 4096,\l 4096, 128 \> \>" ,fontname="Helvetica"];
  Node25 [label="llvm::AllocatorBase\l\< DerivedT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AllocatorBase.html",tooltip="CRTP base class providing obvious overloads for the core Allocate() methods of LLVM-style allocators."];
  Node26 -> Node23 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="llvm::detail::AllocatorHolder\l\< MallocAllocator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1detail_1_1AllocatorHolder.html",tooltip=" "];
  Node27 -> Node26 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="llvm::MallocAllocator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MallocAllocator.html",tooltip=" "];
  Node28 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="llvm::AllocatorBase\l\< MallocAllocator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AllocatorBase.html",tooltip=" "];
  Node25 -> Node28 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MallocAllocator \>" ,fontname="Helvetica"];
  Node29 -> Node26 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MallocAllocator \>" ,fontname="Helvetica"];
  Node29 [label="llvm::detail::AllocatorHolder\l\< Alloc \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1detail_1_1AllocatorHolder.html",tooltip=" "];
  Node30 -> Node29 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="Alloc",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ID" ,fontname="Helvetica"];
}
