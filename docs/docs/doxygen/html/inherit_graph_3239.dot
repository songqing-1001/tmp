digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="llvm::iterator_facade\l_base\< DerivedT, std\l::iterator_traits\< ItTy\l \>::iterator_category, std\l::remove_reference_t\< ReferenceTy\l \>, std::iterator_traits\< ItTy\l \>::difference_type, std::remove\l_reference_t\< ReferenceTy \> *, ReferenceTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::iterator_adaptor\l_base\< DerivedT, ItTy,\l std::iterator_traits\<\l ItTy \>::iterator_category,\l std::remove_reference_t\<\l ReferenceTy \>, std::iterator\l_traits\< ItTy \>::difference_type,\l std::remove_reference_t\< ReferenceTy\l \> *, ReferenceTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::mapped_iterator\l_base\< DerivedT, ItTy,\l ReferenceTy \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1mapped__iterator__base.html",tooltip="A base type of mapped iterator, that is useful for building derived iterators that do not need/want t..."];
}
