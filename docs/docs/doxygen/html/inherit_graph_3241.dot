digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::pointee_iterator\l\< WrappedIteratorT, T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1pointee__iterator.html",tooltip="An iterator type that allows iterating over the pointees via some other iterator."];
}
