digraph "llvm::SmallMapVector&lt; KeyT, ValueT, N &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::SmallMapVector\l\< KeyT, ValueT, N \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A MapVector that performs no allocations if smaller than a certain size."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::MapVector\< KeyT,\l ValueT, SmallDenseMap\l\< KeyT, unsigned, N \>,\l SmallVector\< std::pair\l\< KeyT, ValueT \>, N \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MapVector.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< KeyT, ValueT, SmallDense\lMap\< KeyT, unsigned, N\l \>, SmallVector\< std::pair\l\< KeyT, ValueT \>, N \> \>" ,fontname="Helvetica"];
  Node3 [label="llvm::MapVector\< KeyT,\l ValueT, MapType, VectorType \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MapVector.html",tooltip="This class implements a map that also provides access to all stored values in a deterministic order."];
  Node1 -> Node4 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Value *, llvm\l::PointerIntPair\< llvm\l::Value *, 1, bool \>, 32 \>" ,fontname="Helvetica"];
  Node4 [label="llvm::SmallMapVector\l\< llvm::Value *, llvm\l::PointerIntPair\< llvm\l::Value *, 1, bool \>, 32 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Use *, llvm\l::Value *, 32 \>" ,fontname="Helvetica"];
  Node5 [label="llvm::SmallMapVector\l\< llvm::Use *, llvm::\lValue *, 32 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const llvm::Recurrence\lDescriptor *, llvm::PHINode\l *, 4 \>" ,fontname="Helvetica"];
  Node6 [label="llvm::SmallMapVector\l\< const llvm::RecurrenceDescriptor\l *, llvm::PHINode *, 4 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Value *, llvm\l::Value *, 4 \>" ,fontname="Helvetica"];
  Node7 [label="llvm::SmallMapVector\l\< llvm::Value *, llvm\l::Value *, 4 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::SelectInst\l *, sroa::RewriteableMemOps, 8 \>" ,fontname="Helvetica"];
  Node8 [label="llvm::SmallMapVector\l\< llvm::SelectInst *,\l sroa::RewriteableMemOps, 8 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node9 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< PHINode *, SmallVector\l\< Instruction *, 4 \>, 4 \>" ,fontname="Helvetica"];
  Node9 [label="llvm::SmallMapVector\l\< PHINode *, SmallVector\l\< Instruction *, 4 \>, 4 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node10 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< unsigned, unsigned, 4 \>" ,fontname="Helvetica"];
  Node10 [label="llvm::SmallMapVector\l\< unsigned, unsigned, 4 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
  Node1 -> Node11 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Value *, llvm\l::WeakTrackingVH, 16 \>" ,fontname="Helvetica"];
  Node11 [label="llvm::SmallMapVector\l\< llvm::Value *, llvm\l::WeakTrackingVH, 16 \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallMapVector.html",tooltip=" "];
}
