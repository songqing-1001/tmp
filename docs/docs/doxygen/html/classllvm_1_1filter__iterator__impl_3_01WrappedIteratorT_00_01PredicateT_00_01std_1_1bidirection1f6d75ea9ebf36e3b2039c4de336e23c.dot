digraph "llvm::filter_iterator_impl&lt; WrappedIteratorT, PredicateT, std::bidirectional_iterator_tag &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::filter_iterator\l_impl\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Specialization of filter_iterator_base for bidirectional iteration."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>, WrappedIteratorT,\l std::common_type_t\< std::bidirectional\l_iterator_tag, std::iterator_traits\<\l WrappedIteratorT \>::iterator_category \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>, std::common\l_type_t\< std::bidirectional_iterator\l_tag, std::iterator_traits\< WrappedIteratorT\l \>::iterator_category \>, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type, typename\l std::iterator_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\< typename std\l::iterator_traits\< WrappedIteratorT \>::value_type, typename\l std::iterator_traits\< WrappedIteratorT \>::value_type \>::value,\l typename std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>::value_type\l * \>, std::conditional_t\< std::is_same\< typename std::iterator\l_traits\< WrappedIteratorT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type \>::value, typename std::iterator\l_traits\< WrappedIteratorT \>::reference, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, std::bidirectional_iterator\l_tag \>, std::common_type_t\< std\l::bidirectional_iterator_tag, std\l::iterator_traits\< WrappedIteratorT\l \>::iterator_category \>, typename std\l::iterator_traits\< WrappedIteratorT \>\l::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::difference_type, std\l::conditional_t\< std::is_same\< typename std\l::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\l\< WrappedIteratorT \>::pointer, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type * \>, std::conditional\l_t\< std::is_same\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node5 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node6 -> Node3 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node6 [label="WrappedIteratorT",height=0.2,width=0.4,color="black",URL="$classWrappedIteratorT.html",tooltip=" "];
  Node7 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, std::bidirectional_iterator\l_tag \>, WrappedIteratorT, std\l::common_type_t\< std::bidirectional\l_iterator_tag, std::iterator_traits\l\< WrappedIteratorT \>::iterator_category \> \>" ,fontname="Helvetica"];
  Node7 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node5 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node6 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node6 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" End" ,fontname="Helvetica"];
  Node9 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Pred" ,fontname="Helvetica"];
  Node9 [label="PredicateT",height=0.2,width=0.4,color="black",URL="$classPredicateT.html",tooltip=" "];
  Node10 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< WrappedIteratorT,\l PredicateT, std::bidirectional\l_iterator_tag \>" ,fontname="Helvetica"];
  Node10 [label="llvm::filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1filter__iterator__base.html",tooltip="An iterator adaptor that filters the elements of given inner iterators."];
  Node11 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::iterator_adaptor\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l WrappedIteratorT, std::common\l_type_t\< IterTag, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::iterator_facade\l_base\< filter_iterator\l_base\< WrappedIteratorT,\l PredicateT, IterTag \>,\l std::common_type_t\< IterTag,\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category \>, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node5 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, IterTag \>, std::common\l_type_t\< IterTag, std::iterator\l_traits\< WrappedIteratorT \>::iterator\l_category \>, typename std::iterator\l_traits\< WrappedIteratorT \>::value_type,\l typename std::iterator_traits\< WrappedIteratorT\l \>::difference_type, std::conditional_t\< std\l::is_same\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::pointer, typename std::iterator_traits\< WrappedIteratorT \>::value\l_type * \>, std::conditional_t\< std::is_same\< typename std::iterator_traits\l\< WrappedIteratorT \>::value_type, typename std::iterator_traits\< WrappedIteratorT\l \>::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT \>::reference,\l typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node6 -> Node11 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node7 -> Node11 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< filter_iterator_base\l\< WrappedIteratorT, Predicate\lT, IterTag \>, WrappedIteratorT,\l std::common_type_t\< IterTag,\l std::iterator_traits\< WrappedIteratorT\l \>::iterator_category \> \>" ,fontname="Helvetica"];
  Node6 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" End" ,fontname="Helvetica"];
  Node9 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Pred" ,fontname="Helvetica"];
}
