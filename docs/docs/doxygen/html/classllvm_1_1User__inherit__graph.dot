digraph "llvm::User"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::User",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::Value",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Value.html",tooltip="LLVM Value Representation."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::Constant",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Constant.html",tooltip="This is an important base class in LLVM."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::BlockAddress",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BlockAddress.html",tooltip="The address of a basic block."];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::ConstantAggregate",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConstantAggregate.html",tooltip="Base class for aggregate constants (with operands)."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::ConstantArray",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ConstantArray.html",tooltip="ConstantArray - Constant Array Declarations."];
  Node3 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::ConstantData",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConstantData.html",tooltip="Base class for constants with no operands."];
  Node3 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="llvm::ConstantExpr",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConstantExpr.html",tooltip="A constant value that is initialized with an expression using other constant values."];
  Node3 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="llvm::DSOLocalEquivalent",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DSOLocalEquivalent.html",tooltip="Wrapper for a function that represents a value that functionally represents the original function."];
  Node3 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="llvm::GlobalValue",height=0.2,width=0.4,color="red",URL="$classllvm_1_1GlobalValue.html",tooltip=" "];
  Node3 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="llvm::NoCFIValue",height=0.2,width=0.4,color="black",URL="$classllvm_1_1NoCFIValue.html",tooltip="Wrapper for a value that won't be replaced with a CFI jump table pointer in LowerTypeTestsModule."];
  Node1 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="llvm::DerivedUser",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DerivedUser.html",tooltip="Extension point for the Value hierarchy."];
  Node38 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="llvm::MemoryAccess",height=0.2,width=0.4,color="red",URL="$classllvm_1_1MemoryAccess.html",tooltip=" "];
  Node1 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="llvm::Instruction",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Instruction.html",tooltip=" "];
  Node44 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="llvm::AtomicCmpXchgInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicCmpXchgInst.html",tooltip="An instruction that atomically checks whether a specified value is in a memory location,..."];
  Node44 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="llvm::AtomicRMWInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicRMWInst.html",tooltip="an instruction that atomically reads a memory location, combines it with another value,..."];
  Node44 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="llvm::BinaryOperator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BinaryOperator.html",tooltip=" "];
  Node44 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="llvm::BranchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BranchInst.html",tooltip="Conditional or Unconditional Branch instruction."];
  Node44 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="llvm::CallBase",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CallBase.html",tooltip="Base class for all callable instructions (InvokeInst and CallInst) Holds everything related to callin..."];
  Node44 -> Node144 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node144 [label="llvm::CatchReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchReturnInst.html",tooltip=" "];
  Node44 -> Node145 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node145 [label="llvm::CatchSwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchSwitchInst.html",tooltip=" "];
  Node44 -> Node146 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node146 [label="llvm::CleanupReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CleanupReturnInst.html",tooltip=" "];
  Node44 -> Node147 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node147 [label="llvm::CmpInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CmpInst.html",tooltip="This class is the base class for the comparison instructions."];
  Node44 -> Node150 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node150 [label="llvm::ExtractElementInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ExtractElementInst.html",tooltip="This instruction extracts a single (scalar) element from a VectorType value."];
  Node44 -> Node151 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node151 [label="llvm::FenceInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FenceInst.html",tooltip="An instruction for ordering other memory operations."];
  Node44 -> Node152 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node152 [label="llvm::FuncletPadInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1FuncletPadInst.html",tooltip=" "];
  Node44 -> Node155 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node155 [label="llvm::GetElementPtrInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1GetElementPtrInst.html",tooltip="an instruction for type-safe pointer arithmetic to access elements of arrays and structs"];
  Node44 -> Node156 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node156 [label="llvm::IndirectBrInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IndirectBrInst.html",tooltip="Indirect Branch Instruction."];
  Node44 -> Node157 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node157 [label="llvm::InsertElementInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InsertElementInst.html",tooltip="This instruction inserts a single (scalar) element into a VectorType value."];
  Node44 -> Node158 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node158 [label="llvm::InsertValueInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InsertValueInst.html",tooltip="This instruction inserts a struct field of array element value into an aggregate value."];
  Node44 -> Node159 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node159 [label="llvm::LandingPadInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LandingPadInst.html",tooltip="The landingpad instruction holds all of the information necessary to generate correct exception handl..."];
  Node44 -> Node160 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node160 [label="llvm::PHINode",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PHINode.html",tooltip=" "];
  Node44 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node161 [label="llvm::ResumeInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ResumeInst.html",tooltip="Resume the propagation of an exception."];
  Node44 -> Node162 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node162 [label="llvm::ReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ReturnInst.html",tooltip="Return a value (possibly void), from a function."];
  Node44 -> Node163 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node163 [label="llvm::SelectInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SelectInst.html",tooltip="This class represents the LLVM 'select' instruction."];
  Node44 -> Node164 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node164 [label="llvm::ShuffleVectorInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ShuffleVectorInst.html",tooltip="This instruction constructs a fixed permutation of two input vectors."];
  Node44 -> Node165 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node165 [label="llvm::StoreInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StoreInst.html",tooltip="An instruction for storing to memory."];
  Node44 -> Node166 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node166 [label="llvm::SwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SwitchInst.html",tooltip="Multiway switch."];
  Node44 -> Node167 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node167 [label="llvm::UnaryInstruction",height=0.2,width=0.4,color="red",URL="$classllvm_1_1UnaryInstruction.html",tooltip=" "];
  Node44 -> Node188 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node188 [label="llvm::UnreachableInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1UnreachableInst.html",tooltip="This function has undefined behavior."];
  Node1 -> Node189 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node189 [label="llvm::Operator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Operator.html",tooltip="This is a utility class that provides an abstraction for the common functionality between Instruction..."];
  Node189 -> Node190 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node190 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::AddrSpaceCast \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node189 -> Node192 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node192 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::BitCast \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node189 -> Node194 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node194 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::GetElementPtr \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node189 -> Node196 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node196 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::PtrToInt \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node189 -> Node198 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node198 [label="llvm::ConcreteOperator\l\< Operator, Instruction\l::ZExt \>",height=0.2,width=0.4,color="red",URL="$classllvm_1_1ConcreteOperator.html",tooltip=" "];
  Node189 -> Node200 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node200 [label="llvm::FPMathOperator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FPMathOperator.html",tooltip="Utility class for floating point operations which can have information about relaxed accuracy require..."];
  Node189 -> Node201 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node201 [label="llvm::OverflowingBinaryOperator",height=0.2,width=0.4,color="red",URL="$classllvm_1_1OverflowingBinaryOperator.html",tooltip="Utility class for integer operators which may exhibit overflow - Add, Sub, Mul, and Shl."];
  Node189 -> Node210 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node210 [label="llvm::PossiblyExactOperator",height=0.2,width=0.4,color="red",URL="$classllvm_1_1PossiblyExactOperator.html",tooltip="A udiv or sdiv instruction, which can be marked as \"exact\", indicating that no bits are destroyed."];
}
