digraph "llvm::LoopVectorizationCostModel"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::LoopVectorizationCost\lModel",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="LoopVectorizationCostModel - estimates the expected speedups due to vectorization."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ProfitableVFs" ,fontname="Helvetica"];
  Node2 [label="llvm::SmallVector\<\l llvm::VectorizationFactor, 8 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::SmallVectorImpl\l\< llvm::VectorizationFactor \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::VectorizationFactor \>" ,fontname="Helvetica"];
  Node4 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node5 -> Node2 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::SmallVectorStorage\l\< llvm::VectorizationFactor, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node6 [label="char",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node7 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::VectorizationFactor, N \>" ,fontname="Helvetica"];
  Node7 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node6 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node8 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::VectorizationFactor, 8 \>" ,fontname="Helvetica"];
  Node8 [label="llvm::SmallVector\<\l T, N \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip="This is a 'vector' (really, a variable-sized array), optimized for the case when the array is small."];
  Node4 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 -> Node8 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::SmallVectorStorage\l\< T, CalculateSmallVectorDefault\lInlinedElements\< T \>::value \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip=" "];
  Node6 -> Node9 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node7 -> Node9 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T, CalculateSmallVector\lDefaultInlinedElements\l\< T \>::value \>" ,fontname="Helvetica"];
  Node10 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" AC" ,fontname="Helvetica"];
  Node10 [label="llvm::AssumptionCache",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AssumptionCache.html",tooltip="A cache of @llvm.assume calls within a function."];
  Node11 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DB" ,fontname="Helvetica"];
  Node11 [label="llvm::DemandedBits",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DemandedBits.html",tooltip=" "];
  Node12 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" TheLoop" ,fontname="Helvetica"];
  Node12 [label="llvm::Loop",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Loop.html",tooltip="Represents a single loop in the control flow graph."];
  Node13 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::LoopBase\< BasicBlock,\l Loop \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopBase.html",tooltip=" "];
  Node14 -> Node13 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BasicBlock, Loop \>" ,fontname="Helvetica"];
  Node14 [label="llvm::LoopBase\< BlockT,\l LoopT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopBase.html",tooltip="Instances of this class are used to represent loops that are detected in the flow graph."];
  Node15 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ElementTypesInLoop" ,fontname="Helvetica"];
  Node15 [label="llvm::SmallPtrSet\<\l llvm::Type *, 16 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSet.html",tooltip=" "];
  Node16 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="llvm::SmallPtrSetImpl\l\< llvm::Type * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSetImpl.html",tooltip=" "];
  Node17 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="llvm::SmallPtrSetImplBase",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSetImplBase.html",tooltip="SmallPtrSetImplBase - This is the common code shared among all the SmallPtrSet<>'s,..."];
  Node18 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="llvm::DebugEpochBase",height=0.2,width=0.4,color="black",URL="$classllvm_1_1DebugEpochBase.html",tooltip="A base class for data structure classes wishing to make iterators (\"handles\") pointing into themselve..."];
  Node19 -> Node17 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" CurArraySize\nNumNonEmpty\nNumTombstones" ,fontname="Helvetica"];
  Node19 [label="unsigned",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node20 -> Node17 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" CurArray\nSmallArray" ,fontname="Helvetica"];
  Node20 [label="const",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node21 -> Node16 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Type * \>" ,fontname="Helvetica"];
  Node21 [label="llvm::SmallPtrSetImpl\l\< PtrType \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSetImpl.html",tooltip="A templated base class for SmallPtrSet which provides the typesafe interface that is common across al..."];
  Node17 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 -> Node15 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< llvm::Type *, 16 \>" ,fontname="Helvetica"];
  Node22 [label="llvm::SmallPtrSet\<\l PtrType, SmallSize \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSet.html",tooltip="SmallPtrSet - This class implements a set which is optimized for holding SmallSize or less elements."];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ORE" ,fontname="Helvetica"];
  Node23 [label="llvm::OptimizationRemark\lEmitter",height=0.2,width=0.4,color="black",URL="$classllvm_1_1OptimizationRemarkEmitter.html",tooltip="The optimization diagnostic interface."];
  Node24 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" PSE" ,fontname="Helvetica"];
  Node24 [label="llvm::PredicatedScalarEvolution",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PredicatedScalarEvolution.html",tooltip="An interface layer with SCEV used to manage how we see SCEV expressions for values in the context of ..."];
  Node25 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Legal" ,fontname="Helvetica"];
  Node25 [label="llvm::LoopVectorizationLegality",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopVectorizationLegality.html",tooltip="LoopVectorizationLegality checks if it is legal to vectorize a loop, and to what vectorization factor..."];
  Node26 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" LI" ,fontname="Helvetica"];
  Node26 [label="llvm::LoopInfo",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopInfo.html",tooltip=" "];
  Node27 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="llvm::LoopInfoBase\l\< BasicBlock, Loop \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopInfoBase.html",tooltip=" "];
  Node28 -> Node27 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BasicBlock, Loop \>" ,fontname="Helvetica"];
  Node28 [label="llvm::LoopInfoBase\l\< BlockT, LoopT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1LoopInfoBase.html",tooltip="This class builds and contains all of the top-level loop structures in the specified function."];
  Node29 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InterleaveInfo" ,fontname="Helvetica"];
  Node29 [label="llvm::InterleavedAccessInfo",height=0.2,width=0.4,color="black",URL="$classllvm_1_1InterleavedAccessInfo.html",tooltip="Drive the analysis of interleaved memory accesses in the loop."];
  Node20 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" TheFunction\nTTI\nHints\nTLI" ,fontname="Helvetica"];
  Node30 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" VecValuesToIgnore\nValuesToIgnore" ,fontname="Helvetica"];
  Node30 [label="llvm::SmallPtrSet\<\l const llvm::Value *, 16 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSet.html",tooltip=" "];
  Node31 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="llvm::SmallPtrSetImpl\l\< const llvm::Value * \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallPtrSetImpl.html",tooltip=" "];
  Node17 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 -> Node31 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const llvm::Value * \>" ,fontname="Helvetica"];
  Node22 -> Node30 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< const llvm::Value\l *, 16 \>" ,fontname="Helvetica"];
}
