digraph "llvm::pdb::GSIHashIterator"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::pdb::GSIHashIterator",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Iterator over hash records producing symbol record offsets."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< GSIHashIterator,\l std::random_access_iterator\l_tag, const uint32_t, typename\l std::iterator_traits\< FixedStreamArray\lIterator\< PSHashRecord \> \>::difference\l_type, std::conditional_t\< std::is_same\l\< const uint32_t, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord\l \> \>::value_type \>::value, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord\l \> \>::pointer, const uint32_t * \>, std::conditional\l_t\< std::is_same\< const uint32_t, typename std::iterator\l_traits\< FixedStreamArrayIterator\< PSHashRecord \> \>::value\l_type \>::value, typename std::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::reference, const uint32_t & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< GSIHashIterator,\l std::random_access\l_iterator_tag, const\l uint32_t, typename std\l::iterator_traits\< FixedStreamArray\lIterator\< PSHashRecord \> \>::difference\l_type, std::conditional_t\< std::is\l_same\< const uint32_t, typename std\l::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::value_type \>::value,\l typename std::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::pointer, const uint32_t * \>, std\l::conditional_t\< std::is_same\< const uint32_t, typename\l std::iterator_traits\< FixedStreamArrayIterator\< PSHashRecord\l \> \>::value_type \>::value, typename std::iterator_traits\< FixedStreamArrayIterator\l\< PSHashRecord \> \>::reference, const uint32_t & \> \>" ,fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node5 [label="llvm::FixedStreamArrayIterator\l\< PSHashRecord \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedStreamArrayIterator.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< PSHashRecord \>" ,fontname="Helvetica"];
  Node6 [label="llvm::FixedStreamArrayIterator\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedStreamArrayIterator.html",tooltip=" "];
  Node7 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< GSIHashIterator,\l FixedStreamArrayIterator\l\< PSHashRecord \>, std::random\l_access_iterator_tag, const\l uint32_t \>" ,fontname="Helvetica"];
  Node7 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node9 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node9 [label="WrappedIteratorT",height=0.2,width=0.4,color="black",URL="$classWrappedIteratorT.html",tooltip=" "];
}
