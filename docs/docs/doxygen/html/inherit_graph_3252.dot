digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="llvm::iterator_facade\l_base\< ImutAVLValueIterator\l\< T \>, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type,\l typename std::iterator_traits\<\l T::TreeTy::iterator \>::difference\l_type, std::conditional_t\< std::is\l_same\< const T::value_type, typename\l std::iterator_traits\< T::TreeTy::iterator\l \>::value_type \>::value, typename std::iterator\l_traits\< T::TreeTy::iterator \>::pointer, const\l T::value_type * \>, std::conditional_t\< std::is\l_same\< const T::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::value_type \>::value,\l typename std::iterator_traits\< T::TreeTy::iterator\l \>::reference, const T::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::ImutAVLValueIterator\< T \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1ImutAVLValueIterator.html",tooltip="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference."];
}
