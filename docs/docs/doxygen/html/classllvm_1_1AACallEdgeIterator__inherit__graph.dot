digraph "llvm::AACallEdgeIterator"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::AACallEdgeIterator",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An Iterator for call edges, creates AACallEdges attributes in a lazy way."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< AACallEdgeIterator,\l SetVector\< Function * \>\l::iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< AACallEdgeIterator,\l typename std::iterator\l_traits\< SetVector\< Function\l * \>::iterator \>::iterator_category,\l typename std::iterator_traits\< SetVector\l\< Function * \>::iterator \>::value_type,\l typename std::iterator_traits\< SetVector\l\< Function * \>::iterator \>::difference_type,\l std::conditional_t\< std::is_same\< typename\l std::iterator_traits\< SetVector\< Function *\l \>::iterator \>::value_type, typename std::iterator\l_traits\< SetVector\< Function * \>::iterator \>::value\l_type \>::value, typename std::iterator_traits\< SetVector\l\< Function * \>::iterator \>::pointer, typename std::iterator\l_traits\< SetVector\< Function * \>::iterator \>::value_type *\l \>, std::conditional_t\< std::is_same\< typename std::iterator\l_traits\< SetVector\< Function * \>::iterator \>::value_type, typename\l std::iterator_traits\< SetVector\< Function * \>::iterator \>::value\l_type \>::value, typename std::iterator_traits\< SetVector\< Function\l * \>::iterator \>::reference, typename std::iterator_traits\< SetVector\l\< Function * \>::iterator \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< AACallEdgeIterator,\l typename std::iterator\l_traits\< SetVector\< Function\l * \>::iterator \>::iterator\l_category, typename std::iterator\l_traits\< SetVector\< Function * \>\l::iterator \>::value_type, typename\l std::iterator_traits\< SetVector\< Function\l * \>::iterator \>::difference_type, std::\lconditional_t\< std::is_same\< typename std\l::iterator_traits\< SetVector\< Function * \>\l::iterator \>::value_type, typename std::iterator\l_traits\< SetVector\< Function * \>::iterator \>::value\l_type \>::value, typename std::iterator_traits\< SetVector\l\< Function * \>::iterator \>::pointer, typename std::iterator\l_traits\< SetVector\< Function * \>::iterator \>::value_type *\l \>, std::conditional_t\< std::is_same\< typename std::iterator\l_traits\< SetVector\< Function * \>::iterator \>::value_type, typename\l std::iterator_traits\< SetVector\< Function * \>::iterator \>::value\l_type \>::value, typename std::iterator_traits\< SetVector\< Function\l * \>::iterator \>::reference, typename std::iterator_traits\< SetVector\l\< Function * \>::iterator \>::value_type & \> \>" ,fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< AACallEdgeIterator,\l SetVector\< Function\l * \>::iterator \>" ,fontname="Helvetica"];
  Node5 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
}
