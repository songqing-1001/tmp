digraph "llvm::TargetLoweringBase::ArgListEntry"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="llvm::TargetLoweringBase\l::ArgListEntry",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Ty\nIndirectType" ,fontname="Helvetica"];
  Node2 [label="llvm::Type",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Type.html",tooltip="The instances of the Type class are immutable: once they are created, they are never changed."];
  Node2 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ContainedTys" ,fontname="Helvetica"];
  Node3 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" NumContainedTys" ,fontname="Helvetica"];
  Node3 [label="unsigned",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Alignment" ,fontname="Helvetica"];
  Node4 [label="llvm::MaybeAlign",height=0.2,width=0.4,color="black",URL="$structllvm_1_1MaybeAlign.html",tooltip="This struct is a compact representation of a valid (power of two) or undefined (0) alignment."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="std::optional\< Align \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Node" ,fontname="Helvetica"];
  Node6 [label="llvm::SDValue",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SDValue.html",tooltip="Unlike LLVM values, Selection DAG nodes may return multiple values as the result of a computation."];
  Node7 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Val" ,fontname="Helvetica"];
  Node7 [label="llvm::Value",height=0.2,width=0.4,color="black",URL="$classllvm_1_1Value.html",tooltip="LLVM Value Representation."];
  Node8 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" MaximumAlignment" ,fontname="Helvetica"];
  Node8 [label="uint64_t",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node7 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" HasHungOffUses\nNumUserOperands\nSubclassOptionalData\nHasDescriptor\nHasMetadata\nMaxAlignmentExponent\nHasName\nIsUsedByMD" ,fontname="Helvetica"];
  Node9 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" IsSwiftError\nIsZExt\nIsCFGuardTarget\nIsInAlloca\nIsByRef\nIsSRet\nIsInReg\nIsSExt\nIsSwiftSelf\nIsByVal\n..." ,fontname="Helvetica"];
  Node9 [label="bool",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
