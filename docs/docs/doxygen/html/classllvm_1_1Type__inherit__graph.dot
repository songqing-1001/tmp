digraph "llvm::Type"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::Type",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="The instances of the Type class are immutable: once they are created, they are never changed."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::ArrayType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ArrayType.html",tooltip="Class to represent array types."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::FunctionType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FunctionType.html",tooltip="Class to represent function types."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="llvm::IntegerType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1IntegerType.html",tooltip="Class to represent integer types."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="llvm::PointerType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1PointerType.html",tooltip="Class to represent pointers."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::StructType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1StructType.html",tooltip="Class to represent struct types."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::TargetExtType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1TargetExtType.html",tooltip="Class to represent target extensions types, which are generally unintrospectable from target-independ..."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::TypedPointerType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1TypedPointerType.html",tooltip="A few GPU targets, such as DXIL and SPIR-V, have typed pointers."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="llvm::VectorType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VectorType.html",tooltip="Base class of all SIMD vector types."];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="llvm::FixedVectorType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1FixedVectorType.html",tooltip="Class to represent fixed width SIMD vectors."];
  Node9 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::ScalableVectorType",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ScalableVectorType.html",tooltip="Class to represent scalable SIMD vectors."];
}
