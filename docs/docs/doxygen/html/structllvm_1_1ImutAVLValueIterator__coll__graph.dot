digraph "llvm::ImutAVLValueIterator&lt; T &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::ImutAVLValueIterator\< T \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Generic iterator that wraps a T::TreeTy::iterator and exposes iterator::getValue() on dereference."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T::TreeTy\l::iterator \>::iterator_category,\l const T::value_type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< ImutAVLValueIterator\l\< T \>, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type,\l typename std::iterator_traits\<\l T::TreeTy::iterator \>::difference\l_type, std::conditional_t\< std::is\l_same\< const T::value_type, typename\l std::iterator_traits\< T::TreeTy::iterator\l \>::value_type \>::value, typename std::iterator\l_traits\< T::TreeTy::iterator \>::pointer, const\l T::value_type * \>, std::conditional_t\< std::is\l_same\< const T::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::value_type \>::value,\l typename std::iterator_traits\< T::TreeTy::iterator\l \>::reference, const T::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< T \>, std::iterator_traits\l\< T::TreeTy::iterator \>::iterator\l_category, const T::value_type,\l typename std::iterator_traits\<\l T::TreeTy::iterator \>::difference\l_type, std::conditional_t\< std::is\l_same\< const T::value_type, typename\l std::iterator_traits\< T::TreeTy::iterator\l \>::value_type \>::value, typename std::iterator\l_traits\< T::TreeTy::iterator \>::pointer, const\l T::value_type * \>, std::conditional_t\< std::is\l_same\< const T::value_type, typename std::iterator\l_traits\< T::TreeTy::iterator \>::value_type \>::value,\l typename std::iterator_traits\< T::TreeTy::iterator\l \>::reference, const T::value_type & \> \>" ,fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node5 [label="iterator",height=0.2,width=0.4,color="black",URL="$classT_1_1TreeTy_1_1iterator.html",tooltip=" "];
  Node6 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ImutAVLValueIterator\l\< T \>, T::TreeTy::iterator,\l std::iterator_traits\< T\l::TreeTy::iterator \>::iterator\l_category, const T::value_type \>" ,fontname="Helvetica"];
  Node6 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node7 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node8 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node8 [label="WrappedIteratorT",height=0.2,width=0.4,color="black",URL="$classWrappedIteratorT.html",tooltip=" "];
}
