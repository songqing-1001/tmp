digraph "llvm::ilist_node_with_parent&lt; NodeTy, ParentTy, Options &gt;"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::ilist_node_with\l_parent\< NodeTy, ParentTy,\l Options \>",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An ilist node that can access its parent list."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::ilist_node\< NodeTy,\l Options... \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::ilist_node_impl\l\< ilist_detail::compute\l_node_options\< NodeTy,\l Options... \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__impl.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="ilist_detail::compute\l_node_options\< NodeTy,\l Options... \>::type ::\lnode_base_type",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ilist_detail::compute\l_node_options\< NodeTy,\l Options... \>::type \>" ,fontname="Helvetica"];
  Node5 [label="llvm::ilist_node_impl\l\< OptionsT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__impl.html",tooltip="Implementation for an ilist node."];
  Node6 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="OptionsT::node_base_type",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node7 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< NodeTy, Options... \>" ,fontname="Helvetica"];
  Node7 [label="llvm::ilist_node\< T,\l Options \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node.html",tooltip=" "];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::ilist_node_impl\l\< ilist_detail::compute\l_node_options\< T, Options...\l \>::type \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__impl.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="ilist_detail::compute\l_node_options::type \l::node_base_type\< T, Options... \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node5 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ilist_detail::compute\l_node_options\< T, Options...\l \>::type \>" ,fontname="Helvetica"];
  Node1 -> Node10 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MachineBasicBlock,\l MachineFunction \>" ,fontname="Helvetica"];
  Node10 [label="llvm::ilist_node_with\l_parent\< MachineBasicBlock,\l MachineFunction \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="llvm::MachineBasicBlock",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachineBasicBlock.html",tooltip=" "];
  Node1 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MachineInstr, MachineBasic\lBlock, ilist_sentinel_tracking\l\< true \> \>" ,fontname="Helvetica"];
  Node12 [label="llvm::ilist_node_with\l_parent\< MachineInstr,\l MachineBasicBlock, ilist\l_sentinel_tracking\< true \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node12 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="llvm::MachineInstr",height=0.2,width=0.4,color="black",URL="$classllvm_1_1MachineInstr.html",tooltip="Representation of each machine instruction."];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::GenericMachineInstr",height=0.2,width=0.4,color="red",URL="$classllvm_1_1GenericMachineInstr.html",tooltip="A base class for all GenericMachineInstrs."];
  Node1 -> Node33 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< VPRecipeBase, VPBasicBlock \>" ,fontname="Helvetica"];
  Node33 [label="llvm::ilist_node_with\l_parent\< VPRecipeBase,\l VPBasicBlock \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node33 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="llvm::VPRecipeBase",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPRecipeBase.html",tooltip="VPRecipeBase is a base class modeling a sequence of one or more output IR instructions."];
  Node34 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="llvm::VPBlendRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPBlendRecipe.html",tooltip="A recipe for vectorizing a phi-node as a sequence of mask-based select instructions."];
  Node34 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="llvm::VPBranchOnMaskRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPBranchOnMaskRecipe.html",tooltip="A recipe for generating conditional branches on the bits of a mask."];
  Node34 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="llvm::VPDerivedIVRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPDerivedIVRecipe.html",tooltip="A recipe for converting the canonical IV value to the corresponding value of an IV with different sta..."];
  Node34 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="llvm::VPExpandSCEVRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPExpandSCEVRecipe.html",tooltip="Recipe to expand a SCEV expression."];
  Node34 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="llvm::VPHeaderPHIRecipe",height=0.2,width=0.4,color="red",URL="$classllvm_1_1VPHeaderPHIRecipe.html",tooltip="A pure virtual base class for all recipes modeling header phis, including phis for first order recurr..."];
  Node34 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="llvm::VPInstruction",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPInstruction.html",tooltip="This is a concrete Recipe that models a single VPlan-level instruction."];
  Node34 -> Node47 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node47 [label="llvm::VPInterleaveRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPInterleaveRecipe.html",tooltip="VPInterleaveRecipe is a recipe for transforming an interleave group of load or stores into one wide l..."];
  Node34 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="llvm::VPPredInstPHIRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPPredInstPHIRecipe.html",tooltip="VPPredInstPHIRecipe is a recipe for generating the phi nodes needed when control converges back from ..."];
  Node34 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="llvm::VPReductionRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPReductionRecipe.html",tooltip="A recipe to represent inloop reduction operations, performing a reduction on a vector operand into a ..."];
  Node34 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="llvm::VPReplicateRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPReplicateRecipe.html",tooltip="VPReplicateRecipe replicates a given instruction producing multiple scalar copies of the original sca..."];
  Node34 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="llvm::VPScalarIVStepsRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPScalarIVStepsRecipe.html",tooltip="A recipe for handling phi nodes of integer and floating-point inductions, producing their scalar valu..."];
  Node34 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="llvm::VPWidenCallRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenCallRecipe.html",tooltip="A recipe for widening Call instructions."];
  Node34 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="llvm::VPWidenCanonicalIVRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenCanonicalIVRecipe.html",tooltip="A Recipe for widening the canonical induction variable of the vector loop."];
  Node34 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="llvm::VPWidenGEPRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenGEPRecipe.html",tooltip="A recipe for handling GEP instructions."];
  Node34 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="llvm::VPWidenIntOrFpInduction\lRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenIntOrFpInductionRecipe.html",tooltip="A recipe for handling phi nodes of integer and floating-point inductions, producing their vector valu..."];
  Node34 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="llvm::VPWidenMemoryInstruction\lRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenMemoryInstructionRecipe.html",tooltip="A Recipe for widening load/store operations."];
  Node34 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="llvm::VPWidenRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenRecipe.html",tooltip="VPWidenRecipe is a recipe for producing a copy of vector type its ingredient."];
  Node34 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="llvm::VPWidenSelectRecipe",height=0.2,width=0.4,color="black",URL="$classllvm_1_1VPWidenSelectRecipe.html",tooltip="A recipe for widening select instructions."];
  Node1 -> Node59 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< Instruction, BasicBlock \>" ,fontname="Helvetica"];
  Node59 [label="llvm::ilist_node_with\l_parent\< Instruction,\l BasicBlock \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node59 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node60 [label="llvm::Instruction",height=0.2,width=0.4,color="red",URL="$classllvm_1_1Instruction.html",tooltip=" "];
  Node60 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node61 [label="llvm::AtomicCmpXchgInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicCmpXchgInst.html",tooltip="An instruction that atomically checks whether a specified value is in a memory location,..."];
  Node60 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node62 [label="llvm::AtomicRMWInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1AtomicRMWInst.html",tooltip="an instruction that atomically reads a memory location, combines it with another value,..."];
  Node60 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="llvm::BinaryOperator",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BinaryOperator.html",tooltip=" "];
  Node60 -> Node64 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node64 [label="llvm::BranchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BranchInst.html",tooltip="Conditional or Unconditional Branch instruction."];
  Node60 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node65 [label="llvm::CallBase",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CallBase.html",tooltip="Base class for all callable instructions (InvokeInst and CallInst) Holds everything related to callin..."];
  Node60 -> Node160 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node160 [label="llvm::CatchReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchReturnInst.html",tooltip=" "];
  Node60 -> Node161 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node161 [label="llvm::CatchSwitchInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CatchSwitchInst.html",tooltip=" "];
  Node60 -> Node162 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node162 [label="llvm::CleanupReturnInst",height=0.2,width=0.4,color="black",URL="$classllvm_1_1CleanupReturnInst.html",tooltip=" "];
  Node60 -> Node163 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node163 [label="llvm::CmpInst",height=0.2,width=0.4,color="red",URL="$classllvm_1_1CmpInst.html",tooltip="This class is the base class for the comparison instructions."];
  Node1 -> Node205 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< MCFragment, MCSection \>" ,fontname="Helvetica"];
  Node205 [label="llvm::ilist_node_with\l_parent\< MCFragment,\l MCSection \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node205 -> Node206 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node206 [label="llvm::MCFragment",height=0.2,width=0.4,color="red",URL="$classllvm_1_1MCFragment.html",tooltip=" "];
  Node1 -> Node231 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BasicBlock, Function \>" ,fontname="Helvetica"];
  Node231 [label="llvm::ilist_node_with\l_parent\< BasicBlock,\l Function \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1ilist__node__with__parent.html",tooltip=" "];
  Node231 -> Node232 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node232 [label="llvm::BasicBlock",height=0.2,width=0.4,color="black",URL="$classllvm_1_1BasicBlock.html",tooltip="LLVM Basic Block Representation."];
}
