digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node0 [label="llvm::iterator_facade\l_base\< early_inc_iterator\l_impl\< WrappedIteratorT\l \>, std::input_iterator_tag,\l typename std::iterator_traits\l\< WrappedIteratorT \>::value_type,\l typename std::iterator_traits\<\l WrappedIteratorT \>::difference_type,\l std::conditional_t\< std::is_same\< typename\l std::iterator_traits\< WrappedIteratorT \>\l::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node0 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node1 [label="llvm::iterator_adaptor\l_base\< early_inc_iterator\l_impl\< WrappedIteratorT \>\l, WrappedIteratorT, std::input\l_iterator_tag \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::early_inc_iterator\l_impl\< WrappedIteratorT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1early__inc__iterator__impl.html",tooltip="A pseudo-iterator adaptor that is designed to implement \"early increment\" style loops."];
}
