digraph "llvm::detail::indexed_accessor_range_base&lt; DerivedT, BaseT, T, PointerT, ReferenceT &gt;::iterator"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::detail::indexed\l_accessor_range_base\l\< DerivedT, BaseT, T,\l PointerT, ReferenceT \>\l::iterator",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="An iterator element of this range."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::indexed_accessor\l_iterator\< iterator, BaseT,\l T, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1indexed__accessor__iterator.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< iterator, std\l::random_access_iterator\l_tag, T, std::ptrdiff_t,\l PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, std::random\l_access_iterator_tag,\l T, std::ptrdiff_t, PointerT,\l ReferenceT \>" ,fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< iterator, BaseT,\l T, PointerT, ReferenceT \>" ,fontname="Helvetica"];
  Node5 [label="llvm::indexed_accessor\l_iterator\< DerivedT, BaseT,\l T, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1indexed__accessor__iterator.html",tooltip="A utility class used to implement an iterator that contains some base object and an index."];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::iterator_facade\l_base\< DerivedT, std\l::random_access_iterator\l_tag, T, std::ptrdiff_t,\l T *, T & \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, std::random\l_access_iterator_tag,\l T, std::ptrdiff_t, T *, T & \>" ,fontname="Helvetica"];
}
