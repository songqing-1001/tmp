digraph "llvm::GraphTraits&lt; BoUpSLP * &gt;::ChildIteratorType"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="llvm::GraphTraits\<\l BoUpSLP * \>::ChildIteratorType",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Add the VectorizableTree to the index iterator to be able to return TreeEntry pointers."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="llvm::iterator_adaptor\l_base\< ChildIteratorType,\l SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip=" "];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="llvm::iterator_facade\l_base\< ChildIteratorType,\l typename std::iterator\l_traits\< SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>\l::iterator_category, typename\l std::iterator_traits\< SmallVector\l\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::value_type, typename std::iterator\l_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::difference_type, std::\lconditional_t\< std::is_same\< typename std\l::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type, typename std::iterator\l_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::value_type \>::value, typename std::iterator_traits\l\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::pointer,\l typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type * \>, std::conditional_t\< std::is\l_same\< typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type, typename std::iterator_traits\< SmallVector\l\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::value_type \>::value, typename std\l::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::reference,\l typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node3 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ChildIteratorType,\l typename std::iterator\l_traits\< SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>\l::iterator_category, typename\l std::iterator_traits\< SmallVector\l\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::value_type, typename std::iterator\l_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::difference_type, std::\lconditional_t\< std::is_same\< typename std\l::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type, typename std::iterator\l_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator\l \>::value_type \>::value, typename std::iterator_traits\l\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::pointer,\l typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type * \>, std::conditional_t\< std::is\l_same\< typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo,\l 1 \>::iterator \>::value_type, typename std::iterator_traits\< SmallVector\l\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::value_type \>::value, typename std\l::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::reference,\l typename std::iterator_traits\< SmallVector\< BoUpSLP::EdgeInfo, 1 \>::iterator \>::value_type & \> \>" ,fontname="Helvetica"];
  Node4 [label="llvm::iterator_facade\l_base\< DerivedT, IteratorCategory\lT, T, DifferenceTypeT, PointerT,\l ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip="CRTP base class which implements the entire standard iterator facade in terms of a minimal subset of ..."];
  Node5 -> Node2 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node5 [label="llvm::SmallVector\<\l BoUpSLP::EdgeInfo, 1 \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip=" "];
  Node6 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="llvm::SmallVectorImpl\l\< BoUpSLP::EdgeInfo \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip=" "];
  Node7 -> Node6 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BoUpSLP::EdgeInfo \>" ,fontname="Helvetica"];
  Node7 [label="llvm::SmallVectorImpl\< T \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVectorImpl.html",tooltip="This class consists of common code factored out of the SmallVector class to reduce code duplication b..."];
  Node8 -> Node5 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="llvm::SmallVectorStorage\l\< BoUpSLP::EdgeInfo, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip=" "];
  Node9 -> Node8 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node9 [label="char",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node10 -> Node8 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BoUpSLP::EdgeInfo, N \>" ,fontname="Helvetica"];
  Node10 [label="llvm::SmallVectorStorage\l\< T, N \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip="Storage for the SmallVector elements."];
  Node9 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node11 -> Node5 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< BoUpSLP::EdgeInfo, 1 \>" ,fontname="Helvetica"];
  Node11 [label="llvm::SmallVector\<\l T, N \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1SmallVector.html",tooltip="This is a 'vector' (really, a variable-sized array), optimized for the case when the array is small."];
  Node7 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 -> Node11 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="llvm::SmallVectorStorage\l\< T, CalculateSmallVectorDefault\lInlinedElements\< T \>::value \>",height=0.2,width=0.4,color="black",URL="$structllvm_1_1SmallVectorStorage.html",tooltip=" "];
  Node9 -> Node12 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" InlineElts" ,fontname="Helvetica"];
  Node10 -> Node12 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< T, CalculateSmallVector\lDefaultInlinedElements\l\< T \>::value \>" ,fontname="Helvetica"];
  Node13 -> Node2 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< ChildIteratorType,\l SmallVector\< BoUpSLP\l::EdgeInfo, 1 \>::iterator \>" ,fontname="Helvetica"];
  Node13 [label="llvm::iterator_adaptor\l_base\< DerivedT, WrappedIterator\lT, IteratorCategoryT, T, DifferenceType\lT, PointerT, ReferenceT \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__adaptor__base.html",tooltip="CRTP base class for adapting an iterator to a different type."];
  Node14 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="llvm::iterator_facade\l_base\< DerivedT, typename\l std::iterator_traits\< WrappedIterator\lT \>::iterator_category, typename\l std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>",height=0.2,width=0.4,color="black",URL="$classllvm_1_1iterator__facade__base.html",tooltip=" "];
  Node4 -> Node14 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< DerivedT, typename\l std::iterator_traits\l\< WrappedIteratorT \>::\literator_category, typename\l std::iterator_traits\< WrappedIterator\lT \>::value_type, typename std::iterator\l_traits\< WrappedIteratorT \>::difference\l_type, std::conditional_t\< std::is_same\l\< typename std::iterator_traits\< WrappedIteratorT\l \>::value_type, typename std::iterator_traits\l\< WrappedIteratorT \>::value_type \>::value, typename\l std::iterator_traits\< WrappedIteratorT \>::pointer,\l typename std::iterator_traits\< WrappedIteratorT \>\l::value_type * \>, std::conditional_t\< std::is_same\<\l typename std::iterator_traits\< WrappedIteratorT \>::value\l_type, typename std::iterator_traits\< WrappedIteratorT \>\l::value_type \>::value, typename std::iterator_traits\< WrappedIteratorT\l \>::reference, typename std::iterator_traits\< WrappedIteratorT \>::value_type & \> \>" ,fontname="Helvetica"];
  Node15 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" I" ,fontname="Helvetica"];
  Node15 [label="WrappedIteratorT",height=0.2,width=0.4,color="black",URL="$classWrappedIteratorT.html",tooltip=" "];
  Node16 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" VectorizableTree" ,fontname="Helvetica"];
  Node16 [label="ContainerTy &",height=0.2,width=0.4,color="grey75",tooltip=" "];
}
