digraph "clang::ExplicitCastExpr"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="clang::ExplicitCastExpr",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="ExplicitCastExpr - An explicit cast written in the source code."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="clang::CastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CastExpr.html",tooltip="CastExpr - Base class for type casts, including both implicit casts (ImplicitCastExpr) and explicit c..."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="clang::Expr",height=0.2,width=0.4,color="black",URL="$classclang_1_1Expr.html",tooltip="This represents one expression."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="clang::ValueStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ValueStmt.html",tooltip="Represents a statement that could possibly have a value and type."];
  Node5 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="clang::Stmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1Stmt.html",tooltip="Stmt - This represents one statement."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="clang::BuiltinBitCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1BuiltinBitCastExpr.html",tooltip="Represents a C++2a __builtin_bit_cast(T, v) expression."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="clang::CStyleCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CStyleCastExpr.html",tooltip="CStyleCastExpr - An explicit cast in C (C99 6.5.4) or a C-style cast in C++ (C++ [expr...."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="clang::CXXFunctionalCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXFunctionalCastExpr.html",tooltip="Represents an explicit C++ type conversion that uses \"functional\" notation (C++ [expr...."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="clang::CXXNamedCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXNamedCastExpr.html",tooltip="Abstract class common to all of the C++ \"named\"/\"keyword\" casts."];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="clang::CXXAddrspaceCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXAddrspaceCastExpr.html",tooltip="A C++ addrspace_cast expression (currently only enabled for OpenCL)."];
  Node9 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="clang::CXXConstCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXConstCastExpr.html",tooltip="A C++ const_cast expression (C++ [expr.const.cast])."];
  Node9 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="clang::CXXDynamicCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXDynamicCastExpr.html",tooltip="A C++ dynamic_cast expression (C++ [expr.dynamic.cast])."];
  Node9 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="clang::CXXReinterpretCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXReinterpretCastExpr.html",tooltip="A C++ reinterpret_cast expression (C++ [expr.reinterpret.cast])."];
  Node9 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="clang::CXXStaticCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXStaticCastExpr.html",tooltip="A C++ static_cast expression (C++ [expr.static.cast])."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="clang::ObjCBridgedCastExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCBridgedCastExpr.html",tooltip="An Objective-C \"bridged\" cast expression, which casts between Objective-C pointers and C pointers,..."];
}
