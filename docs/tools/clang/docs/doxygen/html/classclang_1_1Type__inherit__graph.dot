digraph "clang::Type"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="clang::Type",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="The base class of the type hierarchy."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="clang::ExtQualsTypeCommonBase",height=0.2,width=0.4,color="black",URL="$classclang_1_1ExtQualsTypeCommonBase.html",tooltip="Base class that is common to both the ExtQuals and Type classes, which allows QualType to access the ..."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="clang::AdjustedType",height=0.2,width=0.4,color="black",URL="$classclang_1_1AdjustedType.html",tooltip="Represents a type which was implicitly adjusted by the semantic engine for arbitrary reasons."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="clang::DecayedType",height=0.2,width=0.4,color="black",URL="$classclang_1_1DecayedType.html",tooltip="Represents a pointer type decayed from an array or function type."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="clang::ArrayType",height=0.2,width=0.4,color="black",URL="$classclang_1_1ArrayType.html",tooltip="Represents an array type, per C99 6.7.5.2 - Array Declarators."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="clang::ConstantArrayType",height=0.2,width=0.4,color="black",URL="$classclang_1_1ConstantArrayType.html",tooltip="Represents the canonical version of C arrays with a specified constant size."];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="clang::DependentSizedArrayType",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentSizedArrayType.html",tooltip="Represents an array type in C++ whose size is a value-dependent expression."];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="clang::IncompleteArrayType",height=0.2,width=0.4,color="black",URL="$classclang_1_1IncompleteArrayType.html",tooltip="Represents a C array with an unspecified size."];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="clang::VariableArrayType",height=0.2,width=0.4,color="black",URL="$classclang_1_1VariableArrayType.html",tooltip="Represents a C array with a specified size that is not an integer-constant-expression."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="clang::AtomicType",height=0.2,width=0.4,color="black",URL="$classclang_1_1AtomicType.html",tooltip=" "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="clang::AttributedType",height=0.2,width=0.4,color="black",URL="$classclang_1_1AttributedType.html",tooltip="An attributed type is a type to which a type attribute has been applied."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="clang::BitIntType",height=0.2,width=0.4,color="black",URL="$classclang_1_1BitIntType.html",tooltip="A fixed int type of a specified bitwidth."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="clang::BlockPointerType",height=0.2,width=0.4,color="black",URL="$classclang_1_1BlockPointerType.html",tooltip="Pointer to a block type."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="clang::BTFTagAttributedType",height=0.2,width=0.4,color="black",URL="$classclang_1_1BTFTagAttributedType.html",tooltip=" "];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="clang::BuiltinType",height=0.2,width=0.4,color="black",URL="$classclang_1_1BuiltinType.html",tooltip="This class is used for builtin types like 'int'."];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="clang::ComplexType",height=0.2,width=0.4,color="black",URL="$classclang_1_1ComplexType.html",tooltip="Complex values, per C99 6.2.5p11."];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="clang::DecltypeType",height=0.2,width=0.4,color="red",URL="$classclang_1_1DecltypeType.html",tooltip="Represents the type decltype(expr) (C++11)."];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="clang::DeducedType",height=0.2,width=0.4,color="red",URL="$classclang_1_1DeducedType.html",tooltip="Common base class for placeholders for types that get replaced by placeholder type deduction: C++11 a..."];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="clang::DependentAddressSpaceType",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentAddressSpaceType.html",tooltip="Represents an extended address space qualifier where the input address space value is dependent."];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="clang::DependentBitIntType",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentBitIntType.html",tooltip=" "];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="clang::DependentSizedExt\lVectorType",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentSizedExtVectorType.html",tooltip="Represents an extended vector type where either the type or size is dependent."];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="clang::DependentVectorType",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentVectorType.html",tooltip="Represents a vector type where either the type or size is dependent."];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="clang::FunctionType",height=0.2,width=0.4,color="red",URL="$classclang_1_1FunctionType.html",tooltip="FunctionType - C99 6.7.5.3 - Function Declarators."];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="clang::InjectedClassNameType",height=0.2,width=0.4,color="black",URL="$classclang_1_1InjectedClassNameType.html",tooltip="The injected class name of a C++ class template or class template partial specialization."];
  Node1 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="clang::LocInfoType",height=0.2,width=0.4,color="black",URL="$classclang_1_1LocInfoType.html",tooltip="Holds a QualType and a TypeSourceInfo* that came out of a declarator parsing."];
  Node1 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="clang::MacroQualifiedType",height=0.2,width=0.4,color="black",URL="$classclang_1_1MacroQualifiedType.html",tooltip="Sugar type that represents a type that was qualified by a qualifier written as a macro invocation."];
  Node1 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="clang::MatrixType",height=0.2,width=0.4,color="red",URL="$classclang_1_1MatrixType.html",tooltip="Represents a matrix type, as defined in the Matrix Types clang extensions."];
  Node1 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="clang::MemberPointerType",height=0.2,width=0.4,color="black",URL="$classclang_1_1MemberPointerType.html",tooltip="A pointer to member type per C++ 8.3.3 - Pointers to members."];
  Node1 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="clang::ObjCObjectPointerType",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCObjectPointerType.html",tooltip="Represents a pointer to an Objective C object."];
  Node1 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="clang::ObjCObjectType",height=0.2,width=0.4,color="red",URL="$classclang_1_1ObjCObjectType.html",tooltip="Represents a class type in Objective C."];
  Node1 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="clang::ObjCTypeParamType",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCTypeParamType.html",tooltip="Represents a type parameter type in Objective C."];
  Node1 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="clang::PackExpansionType",height=0.2,width=0.4,color="black",URL="$classclang_1_1PackExpansionType.html",tooltip="Represents a pack expansion of types."];
  Node1 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="clang::ParenType",height=0.2,width=0.4,color="black",URL="$classclang_1_1ParenType.html",tooltip="Sugar for parentheses used when specifying types."];
  Node1 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="clang::PipeType",height=0.2,width=0.4,color="black",URL="$classclang_1_1PipeType.html",tooltip="PipeType - OpenCL20."];
  Node1 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="clang::PointerType",height=0.2,width=0.4,color="black",URL="$classclang_1_1PointerType.html",tooltip="PointerType - C99 6.7.5.1 - Pointer Declarators."];
  Node1 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="clang::ReferenceType",height=0.2,width=0.4,color="red",URL="$classclang_1_1ReferenceType.html",tooltip="Base for LValueReferenceType and RValueReferenceType."];
  Node1 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="clang::SubstTemplateType\lParmPackType",height=0.2,width=0.4,color="black",URL="$classclang_1_1SubstTemplateTypeParmPackType.html",tooltip="Represents the result of substituting a set of types for a template type parameter pack."];
  Node1 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="clang::SubstTemplateType\lParmType",height=0.2,width=0.4,color="black",URL="$classclang_1_1SubstTemplateTypeParmType.html",tooltip="Represents the result of substituting a type for a template type parameter."];
  Node1 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="clang::TagType",height=0.2,width=0.4,color="red",URL="$classclang_1_1TagType.html",tooltip=" "];
  Node1 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="clang::TemplateSpecializationType",height=0.2,width=0.4,color="black",URL="$classclang_1_1TemplateSpecializationType.html",tooltip="Represents a type template specialization; the template must be a class template, a type alias templa..."];
  Node1 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="clang::TemplateTypeParmType",height=0.2,width=0.4,color="black",URL="$classclang_1_1TemplateTypeParmType.html",tooltip=" "];
  Node1 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="clang::TypedefType",height=0.2,width=0.4,color="black",URL="$classclang_1_1TypedefType.html",tooltip=" "];
  Node1 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="clang::TypeOfExprType",height=0.2,width=0.4,color="red",URL="$classclang_1_1TypeOfExprType.html",tooltip="Represents a typeof (or typeof) expression (a C2x feature and GCC extension) or a typeof_unqual expre..."];
  Node1 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="clang::TypeOfType",height=0.2,width=0.4,color="black",URL="$classclang_1_1TypeOfType.html",tooltip="Represents typeof(type), a C2x feature and GCC extension, or `typeof_unqual(type),..."];
  Node1 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node59 [label="clang::TypeWithKeyword",height=0.2,width=0.4,color="red",URL="$classclang_1_1TypeWithKeyword.html",tooltip="A helper class for Type nodes having an ElaboratedTypeKeyword."];
  Node1 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="clang::UnaryTransformType",height=0.2,width=0.4,color="red",URL="$classclang_1_1UnaryTransformType.html",tooltip="A unary type transform, which is a type constructed from another."];
  Node1 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node65 [label="clang::UnresolvedUsingType",height=0.2,width=0.4,color="black",URL="$classclang_1_1UnresolvedUsingType.html",tooltip="Represents the dependent type named by a dependently-scoped typename using declaration,..."];
  Node1 -> Node66 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node66 [label="clang::UsingType",height=0.2,width=0.4,color="black",URL="$classclang_1_1UsingType.html",tooltip=" "];
  Node1 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node67 [label="clang::VectorType",height=0.2,width=0.4,color="red",URL="$classclang_1_1VectorType.html",tooltip="Represents a GCC generic vector type."];
}
