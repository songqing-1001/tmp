digraph "clang::syntax::Node"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="clang::syntax::Node",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A node in a syntax tree."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="clang::syntax::Leaf",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1Leaf.html",tooltip="A leaf node points to a single token."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="clang::syntax::Tree",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1Tree.html",tooltip="A node that has children and represents a syntactic language construct."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="clang::syntax::ArraySubscript",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ArraySubscript.html",tooltip="Array size specified inside a declarator."];
  Node3 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="clang::syntax::Declaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1Declaration.html",tooltip="A declaration that can appear at the top-level."];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="clang::syntax::EmptyDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1EmptyDeclaration.html",tooltip="A semicolon in the top-level context. Does not declare anything."];
  Node5 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="clang::syntax::ExplicitTemplate\lInstantiation",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ExplicitTemplateInstantiation.html",tooltip="template <declaration> Examples: template struct X<int> template void foo<int>() template int var<dou..."];
  Node5 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="clang::syntax::LinkageSpecification\lDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1LinkageSpecificationDeclaration.html",tooltip="extern <string-literal> declaration extern <string-literal> { <decls> }"];
  Node5 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="clang::syntax::Namespace\lAliasDefinition",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1NamespaceAliasDefinition.html",tooltip="namespace <name> = <namespace-reference>"];
  Node5 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="clang::syntax::Namespace\lDefinition",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1NamespaceDefinition.html",tooltip="namespace <name> { <decls> }"];
  Node5 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="clang::syntax::SimpleDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1SimpleDeclaration.html",tooltip="Groups multiple declarators (e.g."];
  Node5 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="clang::syntax::StaticAssert\lDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1StaticAssertDeclaration.html",tooltip="static_assert(<condition>, <message>) static_assert(<condition>)"];
  Node5 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="clang::syntax::TemplateDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1TemplateDeclaration.html",tooltip="template <template-parameters> <declaration>"];
  Node5 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="clang::syntax::TypeAlias\lDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1TypeAliasDeclaration.html",tooltip="using <name> = <type>"];
  Node5 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="clang::syntax::UnknownDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1UnknownDeclaration.html",tooltip="Declaration of an unknown kind, e.g. not yet supported in syntax trees."];
  Node5 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="clang::syntax::UsingDeclaration",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1UsingDeclaration.html",tooltip="using <scope>::<name> using typename <scope>::<name>"];
  Node5 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="clang::syntax::UsingNamespace\lDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1UsingNamespaceDirective.html",tooltip="using namespace <name>"];
  Node3 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="clang::syntax::Declarator",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1Declarator.html",tooltip="Covers a name, an initializer and a part of the type outside declaration specifiers."];
  Node18 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="clang::syntax::ParenDeclarator",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ParenDeclarator.html",tooltip="Declarator inside parentheses."];
  Node18 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="clang::syntax::SimpleDeclarator",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1SimpleDeclarator.html",tooltip="A top-level declarator without parentheses."];
  Node3 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="clang::syntax::List",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1List.html",tooltip="A list of Elements separated or terminated by a fixed token."];
  Node21 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="clang::syntax::CallArguments",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1CallArguments.html",tooltip="Models arguments of a function call."];
  Node21 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="clang::syntax::DeclaratorList",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1DeclaratorList.html",tooltip=" "];
  Node21 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="clang::syntax::NestedName\lSpecifier",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1NestedNameSpecifier.html",tooltip="Models a nested-name-specifier."];
  Node21 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="clang::syntax::Parameter\lDeclarationList",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ParameterDeclarationList.html",tooltip="Models a parameter-declaration-list which appears within parameters-and-qualifiers."];
  Node3 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="clang::syntax::MemberPointer",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1MemberPointer.html",tooltip="Member pointer inside a declarator E.g."];
  Node3 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="clang::syntax::Parameters\lAndQualifiers",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ParametersAndQualifiers.html",tooltip="Parameter list for a function type and a trailing return type, if the function has one."];
  Node3 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="clang::syntax::Statement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1Statement.html",tooltip="An abstract node for C++ statements, e.g."];
  Node28 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="clang::syntax::BreakStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1BreakStatement.html",tooltip="break;"];
  Node28 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="clang::syntax::CaseStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1CaseStatement.html",tooltip="case : <body>"];
  Node28 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="clang::syntax::CompoundStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1CompoundStatement.html",tooltip="{ statement1; statement2; â€¦ }"];
  Node28 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="clang::syntax::ContinueStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ContinueStatement.html",tooltip="continue;"];
  Node28 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="clang::syntax::Declaration\lStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1DeclarationStatement.html",tooltip="E.g. 'int a, b = 10;'."];
  Node28 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="clang::syntax::DefaultStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1DefaultStatement.html",tooltip="default: <body>"];
  Node28 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="clang::syntax::EmptyStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1EmptyStatement.html",tooltip="The no-op statement, i.e. ';'."];
  Node28 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="clang::syntax::Expression\lStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ExpressionStatement.html",tooltip="Expression in a statement position, e.g."];
  Node28 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="clang::syntax::ForStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ForStatement.html",tooltip="for (<init>; <cond>; <increment>) <body>"];
  Node28 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="clang::syntax::IfStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1IfStatement.html",tooltip="if (cond) <then-statement> else <else-statement> FIXME: add condition that models 'expression or vari..."];
  Node28 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="clang::syntax::RangeBased\lForStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1RangeBasedForStatement.html",tooltip="for (<decl> : <init>) <body>"];
  Node28 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="clang::syntax::ReturnStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1ReturnStatement.html",tooltip="return <expr>; return;"];
  Node28 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="clang::syntax::SwitchStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1SwitchStatement.html",tooltip="switch (<cond>) <body>"];
  Node28 -> Node42 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node42 [label="clang::syntax::UnknownStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1UnknownStatement.html",tooltip="A statement of an unknown kind, i.e."];
  Node28 -> Node43 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node43 [label="clang::syntax::WhileStatement",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1WhileStatement.html",tooltip="while (<cond>) <body>"];
  Node3 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="clang::syntax::TrailingReturnType",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1TrailingReturnType.html",tooltip="Trailing return type after the parameter list, including the arrow token."];
  Node3 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="clang::syntax::UnqualifiedId",height=0.2,width=0.4,color="black",URL="$classclang_1_1syntax_1_1UnqualifiedId.html",tooltip="Models an unqualified-id."];
}
