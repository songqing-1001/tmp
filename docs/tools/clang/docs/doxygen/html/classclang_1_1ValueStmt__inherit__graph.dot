digraph "clang::ValueStmt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="clang::ValueStmt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Represents a statement that could possibly have a value and type."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="clang::Stmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1Stmt.html",tooltip="Stmt - This represents one statement."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="clang::AttributedStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1AttributedStmt.html",tooltip="Represents an attribute applied to a statement."];
  Node1 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="clang::Expr",height=0.2,width=0.4,color="red",URL="$classclang_1_1Expr.html",tooltip="This represents one expression."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="clang::AbstractConditional\lOperator",height=0.2,width=0.4,color="red",URL="$classclang_1_1AbstractConditionalOperator.html",tooltip="AbstractConditionalOperator - An abstract base class for ConditionalOperator and BinaryConditionalOpe..."];
  Node4 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="clang::AddrLabelExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1AddrLabelExpr.html",tooltip="AddrLabelExpr - The GNU address of label extension, representing &&label."];
  Node4 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="clang::ArrayInitIndexExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ArrayInitIndexExpr.html",tooltip="Represents the index of the current element of an array being initialized by an ArrayInitLoopExpr."];
  Node4 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="clang::ArrayInitLoopExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ArrayInitLoopExpr.html",tooltip="Represents a loop initializing the elements of an array."];
  Node4 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="clang::ArraySubscriptExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ArraySubscriptExpr.html",tooltip="ArraySubscriptExpr - [C99 6.5.2.1] Array Subscripting."];
  Node4 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="clang::ArrayTypeTraitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ArrayTypeTraitExpr.html",tooltip="An Embarcadero array type trait, as used in the implementation of __array_rank and __array_extent."];
  Node4 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="clang::AsTypeExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1AsTypeExpr.html",tooltip="AsTypeExpr - Clang builtin function __builtin_astype [OpenCL 6.2.4.2] This AST node provides support ..."];
  Node4 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="clang::AtomicExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1AtomicExpr.html",tooltip="AtomicExpr - Variadic atomic builtins: __atomic_exchange, __atomic_fetch_*, __atomic_load,..."];
  Node4 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="clang::BinaryOperator",height=0.2,width=0.4,color="red",URL="$classclang_1_1BinaryOperator.html",tooltip="A builtin binary operation expression such as \"x + y\" or \"x <= y\"."];
  Node4 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="clang::BlockExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1BlockExpr.html",tooltip="BlockExpr - Adaptor class for mixing a BlockDecl with expressions."];
  Node4 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="clang::CallExpr",height=0.2,width=0.4,color="red",URL="$classclang_1_1CallExpr.html",tooltip="CallExpr - Represents a function call (C99 6.5.2.2, C++ [expr.call])."];
  Node4 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="clang::CastExpr",height=0.2,width=0.4,color="red",URL="$classclang_1_1CastExpr.html",tooltip="CastExpr - Base class for type casts, including both implicit casts (ImplicitCastExpr) and explicit c..."];
  Node4 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="clang::CharacterLiteral",height=0.2,width=0.4,color="black",URL="$classclang_1_1CharacterLiteral.html",tooltip=" "];
  Node4 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="clang::ChooseExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ChooseExpr.html",tooltip="ChooseExpr - GNU builtin-in function __builtin_choose_expr."];
  Node4 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="clang::CompoundLiteralExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CompoundLiteralExpr.html",tooltip="CompoundLiteralExpr - [C99 6.5.2.5]."];
  Node4 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="clang::ConceptSpecializationExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ConceptSpecializationExpr.html",tooltip="Represents the specialization of a concept - evaluates to a prvalue of type bool."];
  Node4 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="clang::ConvertVectorExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1ConvertVectorExpr.html",tooltip="ConvertVectorExpr - Clang builtin function __builtin_convertvector This AST node provides support for..."];
  Node4 -> Node41 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="clang::CoroutineSuspendExpr",height=0.2,width=0.4,color="red",URL="$classclang_1_1CoroutineSuspendExpr.html",tooltip="Represents an expression that might suspend coroutine execution; either a co_await or co_yield expres..."];
  Node4 -> Node44 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node44 [label="clang::CXXBindTemporaryExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXBindTemporaryExpr.html",tooltip="Represents binding an expression to a temporary."];
  Node4 -> Node45 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node45 [label="clang::CXXBoolLiteralExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXBoolLiteralExpr.html",tooltip="A boolean literal, per ([C++ lex.bool] Boolean literals)."];
  Node4 -> Node46 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node46 [label="clang::CXXConstructExpr",height=0.2,width=0.4,color="red",URL="$classclang_1_1CXXConstructExpr.html",tooltip="Represents a call to a C++ constructor."];
  Node4 -> Node48 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node48 [label="clang::CXXDefaultArgExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXDefaultArgExpr.html",tooltip="A default argument (C++ [dcl.fct.default])."];
  Node4 -> Node49 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node49 [label="clang::CXXDefaultInitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXDefaultInitExpr.html",tooltip="A use of a default initializer in a constructor or in aggregate initialization."];
  Node4 -> Node50 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node50 [label="clang::CXXDeleteExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXDeleteExpr.html",tooltip="Represents a delete expression for memory deallocation and destructor calls, e.g."];
  Node4 -> Node51 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node51 [label="clang::CXXDependentScope\lMemberExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXDependentScopeMemberExpr.html",tooltip="Represents a C++ member access expression where the actual member referenced could not be resolved be..."];
  Node4 -> Node52 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node52 [label="clang::CXXFoldExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXFoldExpr.html",tooltip="Represents a folding of a pack over an operator."];
  Node4 -> Node53 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node53 [label="clang::CXXInheritedCtorInitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXInheritedCtorInitExpr.html",tooltip="Represents a call to an inherited base class constructor from an inheriting constructor."];
  Node4 -> Node54 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node54 [label="clang::CXXNewExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXNewExpr.html",tooltip="Represents a new-expression for memory allocation and constructor calls, e.g: \"new CXXNewExpr(foo)\"."];
  Node4 -> Node55 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node55 [label="clang::CXXNoexceptExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXNoexceptExpr.html",tooltip="Represents a C++11 noexcept expression (C++ [expr.unary.noexcept])."];
  Node4 -> Node56 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node56 [label="clang::CXXNullPtrLiteralExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXNullPtrLiteralExpr.html",tooltip="The null pointer literal (C++11 [lex.nullptr])"];
  Node4 -> Node57 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node57 [label="clang::CXXParenListInitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXParenListInitExpr.html",tooltip="Represents a list-initialization with parenthesis."];
  Node4 -> Node58 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node58 [label="clang::CXXPseudoDestructorExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXPseudoDestructorExpr.html",tooltip="Represents a C++ pseudo-destructor (C++ [expr.pseudo])."];
  Node4 -> Node59 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node59 [label="clang::CXXRewrittenBinary\lOperator",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXRewrittenBinaryOperator.html",tooltip="A rewritten comparison expression that was originally written using operator syntax."];
  Node4 -> Node60 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node60 [label="clang::CXXScalarValueInitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXScalarValueInitExpr.html",tooltip="An expression \"T()\" which creates a value-initialized rvalue of type T, which is a non-class type."];
  Node4 -> Node61 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node61 [label="clang::CXXStdInitializer\lListExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXStdInitializerListExpr.html",tooltip="Implicit construction of a std::initializer_list<T> object from an array temporary within list-initia..."];
  Node4 -> Node62 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node62 [label="clang::CXXThisExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXThisExpr.html",tooltip="Represents the this expression in C++."];
  Node4 -> Node63 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node63 [label="clang::CXXThrowExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXThrowExpr.html",tooltip="A C++ throw-expression (C++ [except.throw])."];
  Node4 -> Node64 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node64 [label="clang::CXXTypeidExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXTypeidExpr.html",tooltip="A C++ typeid expression (C++ [expr.typeid]), which gets the type_info that corresponds to the supplie..."];
  Node4 -> Node65 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node65 [label="clang::CXXUnresolvedConstructExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXUnresolvedConstructExpr.html",tooltip="Describes an explicit type conversion that uses functional notion but could not be resolved because o..."];
  Node4 -> Node66 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node66 [label="clang::CXXUuidofExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXUuidofExpr.html",tooltip="A Microsoft C++ __uuidof expression, which gets the _GUID that corresponds to the supplied type or ex..."];
  Node4 -> Node67 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node67 [label="clang::DeclRefExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1DeclRefExpr.html",tooltip="A reference to a declared variable, function, enum, etc."];
  Node4 -> Node68 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node68 [label="clang::DependentCoawaitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentCoawaitExpr.html",tooltip="Represents a 'co_await' expression while the type of the promise is dependent."];
  Node4 -> Node69 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node69 [label="clang::DependentScopeDecl\lRefExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1DependentScopeDeclRefExpr.html",tooltip="A qualified reference to a name whose declaration cannot yet be resolved."];
  Node4 -> Node70 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node70 [label="clang::DesignatedInitExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1DesignatedInitExpr.html",tooltip="Represents a C99 designated initializer expression."];
  Node1 -> Node136 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node136 [label="clang::LabelStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1LabelStmt.html",tooltip="LabelStmt - Represents a label, which has a substatement."];
}
