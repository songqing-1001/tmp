digraph "clang::InitializationSequence::Step"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="clang::InitializationSequence\l::Step",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="A single step in the initialization sequence."];
  Node2 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Kind" ,fontname="Helvetica"];
  Node2 [label="StepKind",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node3 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" @223" ,fontname="Helvetica"];
  Node3 [label="anonymous:@223",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node4 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Function" ,fontname="Helvetica"];
  Node4 [label="clang::InitializationSequence\l::Step::F",height=0.2,width=0.4,color="black",URL="$structclang_1_1InitializationSequence_1_1Step_1_1F.html",tooltip=" "];
  Node5 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" HadMultipleCandidates" ,fontname="Helvetica"];
  Node5 [label="bool",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node6 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Function" ,fontname="Helvetica"];
  Node6 [label="clang::FunctionDecl",height=0.2,width=0.4,color="black",URL="$classclang_1_1FunctionDecl.html",tooltip="Represents a function declaration or definition."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="clang::DeclaratorDecl",height=0.2,width=0.4,color="black",URL="$classclang_1_1DeclaratorDecl.html",tooltip="Represents a ValueDecl that came out of a declarator."];
  Node8 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="clang::ValueDecl",height=0.2,width=0.4,color="red",URL="$classclang_1_1ValueDecl.html",tooltip="Represent the declaration of a variable (in which case it is an lvalue) a function (in which case it ..."];
  Node13 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="clang::DeclContext",height=0.2,width=0.4,color="black",URL="$classclang_1_1DeclContext.html",tooltip="DeclContext - This is used only as base class of specific decl types that can act as declaration cont..."];
  Node14 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" TagDeclBits" ,fontname="Helvetica"];
  Node14 [label="clang::DeclContext\l::TagDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by TagDecl."];
  Node15 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" EnumDeclBits" ,fontname="Helvetica"];
  Node15 [label="clang::DeclContext\l::EnumDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by EnumDecl."];
  Node16 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" @42" ,fontname="Helvetica"];
  Node16 [label="anonymous:@42",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node17 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" BlockDeclBits" ,fontname="Helvetica"];
  Node17 [label="clang::DeclContext\l::BlockDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by BlockDecl."];
  Node18 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ObjCMethodDeclBits" ,fontname="Helvetica"];
  Node18 [label="clang::DeclContext\l::ObjCMethodDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by ObjCMethodDecl."];
  Node19 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" OMPDeclareReductionDeclBits" ,fontname="Helvetica"];
  Node19 [label="clang::DeclContext\l::OMPDeclareReductionDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by OMPDeclareReductionDecl."];
  Node20 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" LinkageSpecDeclBits" ,fontname="Helvetica"];
  Node20 [label="clang::DeclContext\l::LinkageSpecDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by LinkageSpecDecl."];
  Node21 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" RecordDeclBits" ,fontname="Helvetica"];
  Node21 [label="clang::DeclContext\l::RecordDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by RecordDecl."];
  Node22 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ObjCContainerDeclBits" ,fontname="Helvetica"];
  Node22 [label="clang::DeclContext\l::ObjCContainerDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by ObjCContainerDecl."];
  Node23 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" CXXConstructorDeclBits" ,fontname="Helvetica"];
  Node23 [label="clang::DeclContext\l::CXXConstructorDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by CXXConstructorDecl."];
  Node24 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" FunctionDeclBits" ,fontname="Helvetica"];
  Node24 [label="clang::DeclContext\l::FunctionDeclBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by FunctionDecl."];
  Node25 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DeclContextBits" ,fontname="Helvetica"];
  Node25 [label="clang::DeclContext\l::DeclContextBitfields",height=0.2,width=0.4,color="grey75",tooltip="Stores the bits used by DeclContext."];
  Node10 -> Node13 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" FirstDecl\nLastDecl" ,fontname="Helvetica"];
  Node10 [label="clang::Decl",height=0.2,width=0.4,color="red",URL="$classclang_1_1Decl.html",tooltip="Decl - This represents one declaration (or definition), e.g."];
  Node12 -> Node10 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Access\nFromASTFile\nIdentifierNamespace\nCacheValidAndLinkage" ,fontname="Helvetica"];
  Node12 [label="unsigned",height=0.2,width=0.4,color="black",URL="$classunsigned.html",tooltip=" "];
  Node26 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="clang::Redeclarable\l\< FunctionDecl \>",height=0.2,width=0.4,color="black",URL="$classclang_1_1Redeclarable.html",tooltip=" "];
  Node27 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" RedeclLink" ,fontname="Helvetica"];
  Node27 [label="clang::Redeclarable\l\< decl_type \>::DeclLink",height=0.2,width=0.4,color="black",URL="$classclang_1_1Redeclarable_1_1DeclLink.html",tooltip=" "];
  Node6 -> Node26 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" First" ,fontname="Helvetica"];
  Node28 -> Node26 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< FunctionDecl \>" ,fontname="Helvetica"];
  Node28 [label="clang::Redeclarable\l\< decl_type \>",height=0.2,width=0.4,color="red",URL="$classclang_1_1Redeclarable.html",tooltip="Provides common interface for the Decls that can be redeclared."];
  Node27 -> Node28 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" RedeclLink" ,fontname="Helvetica"];
  Node30 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DefaultedInfo" ,fontname="Helvetica"];
  Node30 [label="clang::FunctionDecl\l::DefaultedFunctionInfo",height=0.2,width=0.4,color="black",URL="$classclang_1_1FunctionDecl_1_1DefaultedFunctionInfo.html",tooltip="Stashed information about a defaulted function definition whose body has not yet been lazily generate..."];
  Node31 -> Node30 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="llvm::TrailingObjects\l\< DefaultedFunctionInfo,\l DeclAccessPair \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node32 -> Node6 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Body" ,fontname="Helvetica"];
  Node32 [label="clang::LazyOffsetPtr\l\< Stmt, uint64_t, &External\lASTSource::GetExternalDeclStmt \>",height=0.2,width=0.4,color="black",URL="$structclang_1_1LazyOffsetPtr.html",tooltip=" "];
  Node33 -> Node32 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Ptr" ,fontname="Helvetica"];
  Node33 [label="uint64_t",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node34 -> Node32 [dir="back",color="orange",fontsize="10",style="dashed",label=" \< Stmt, uint64_t, &External\lASTSource::GetExternalDeclStmt \>" ,fontname="Helvetica"];
  Node34 [label="clang::LazyOffsetPtr\l\< T, OffsT, Get \>",height=0.2,width=0.4,color="black",URL="$structclang_1_1LazyOffsetPtr.html",tooltip="A lazy pointer to an AST node (of base type T) that resides within an external AST source."];
  Node33 -> Node34 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Ptr" ,fontname="Helvetica"];
  Node35 -> Node4 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" FoundDecl" ,fontname="Helvetica"];
  Node35 [label="clang::DeclAccessPair",height=0.2,width=0.4,color="black",URL="$classclang_1_1DeclAccessPair.html",tooltip="A POD class for pairing a NamedDecl* with an access specifier."];
  Node36 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Type" ,fontname="Helvetica"];
  Node36 [label="clang::QualType",height=0.2,width=0.4,color="black",URL="$classclang_1_1QualType.html",tooltip="A (possibly-)qualified type."];
  Node37 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ICS" ,fontname="Helvetica"];
  Node37 [label="clang::ImplicitConversion\lSequence",height=0.2,width=0.4,color="black",URL="$classclang_1_1ImplicitConversionSequence.html",tooltip="ImplicitConversionSequence - Represents an implicit conversion sequence, which may be a standard conv..."];
  Node38 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Bad" ,fontname="Helvetica"];
  Node38 [label="clang::BadConversionSequence",height=0.2,width=0.4,color="black",URL="$structclang_1_1BadConversionSequence.html",tooltip="BadConversionSequence - Records information about an invalid conversion sequence."];
  Node39 -> Node38 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Kind" ,fontname="Helvetica"];
  Node39 [label="FailureKind",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node40 -> Node38 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" FromExpr" ,fontname="Helvetica"];
  Node40 [label="clang::Expr",height=0.2,width=0.4,color="black",URL="$classclang_1_1Expr.html",tooltip="This represents one expression."];
  Node41 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node41 [label="clang::ValueStmt",height=0.2,width=0.4,color="red",URL="$classclang_1_1ValueStmt.html",tooltip="Represents a statement that could possibly have a value and type."];
  Node106 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Ambiguous" ,fontname="Helvetica"];
  Node106 [label="clang::AmbiguousConversion\lSequence",height=0.2,width=0.4,color="black",URL="$structclang_1_1AmbiguousConversionSequence.html",tooltip="Represents an ambiguous user-defined conversion sequence."];
  Node107 -> Node106 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Buffer" ,fontname="Helvetica"];
  Node107 [label="char",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node108 -> Node106 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ToTypePtr\nFromTypePtr" ,fontname="Helvetica"];
  Node108 [label="void *",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node109 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Standard" ,fontname="Helvetica"];
  Node109 [label="clang::StandardConversion\lSequence",height=0.2,width=0.4,color="black",URL="$classclang_1_1StandardConversionSequence.html",tooltip="StandardConversionSequence - represents a standard conversion sequence (C++ 13.3.3...."];
  Node110 -> Node109 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" CopyConstructor" ,fontname="Helvetica"];
  Node110 [label="clang::CXXConstructorDecl",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXConstructorDecl.html",tooltip="Represents a C++ constructor within a class."];
  Node111 -> Node110 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node111 [label="clang::CXXMethodDecl",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXMethodDecl.html",tooltip="Represents a static or instance method of a struct/union/class."];
  Node6 -> Node111 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node112 -> Node110 [dir="back",color="firebrick4",fontsize="10",style="solid",fontname="Helvetica"];
  Node112 [label="llvm::TrailingObjects\l\< CXXConstructorDecl,\l InheritedConstructor,\l ExplicitSpecifier \>",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node113 -> Node110 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" TrailingObjects" ,fontname="Helvetica"];
  Node113 [label="friend",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node114 -> Node109 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" Third\nSecond\nFirst" ,fontname="Helvetica"];
  Node114 [label="ImplicitConversionKind",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node12 -> Node109 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" DirectBinding\nReferenceBinding\nBindsToFunctionLvalue\nIncompatibleObjC\nObjCLifetimeConversionBinding\nBindsImplicitObjectArgumentWithout\lRefQualifier\nDeprecatedStringLiteralToCharPtr\nIsLvalueReference\nBindsToRvalue\nQualificationIncludesObjCLifetime\n..." ,fontname="Helvetica"];
  Node35 -> Node109 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" FoundCopyConstructor" ,fontname="Helvetica"];
  Node108 -> Node109 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ToTypePtrs\nFromTypePtr" ,fontname="Helvetica"];
  Node115 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" @226" ,fontname="Helvetica"];
  Node115 [label="anonymous:@226",height=0.2,width=0.4,color="grey75",tooltip=" "];
  Node116 -> Node37 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" UserDefined" ,fontname="Helvetica"];
  Node116 [label="clang::UserDefinedConversion\lSequence",height=0.2,width=0.4,color="black",URL="$structclang_1_1UserDefinedConversionSequence.html",tooltip="UserDefinedConversionSequence - Represents a user-defined conversion sequence (C++ 13...."];
  Node109 -> Node116 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" After\nBefore" ,fontname="Helvetica"];
  Node5 -> Node116 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" HadMultipleCandidates\nEllipsisConversion" ,fontname="Helvetica"];
  Node6 -> Node116 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" ConversionFunction" ,fontname="Helvetica"];
  Node35 -> Node116 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" FoundConversionFunction" ,fontname="Helvetica"];
  Node117 -> Node1 [dir="back",color="darkorchid3",fontsize="10",style="dashed",label=" WrappingSyntacticList" ,fontname="Helvetica"];
  Node117 [label="clang::InitListExpr",height=0.2,width=0.4,color="black",URL="$classclang_1_1InitListExpr.html",tooltip="Describes an C or C++ initializer list."];
  Node40 -> Node117 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}
