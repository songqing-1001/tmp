digraph "clang::Stmt"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="clang::Stmt",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Stmt - This represents one statement."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node2 [label="clang::AsmStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1AsmStmt.html",tooltip="AsmStmt is the base class for GCCAsmStmt and MSAsmStmt."];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node3 [label="clang::GCCAsmStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1GCCAsmStmt.html",tooltip="This represents a GCC inline-assembly statement extension."];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node4 [label="clang::MSAsmStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1MSAsmStmt.html",tooltip="This represents a Microsoft inline-assembly statement extension."];
  Node1 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 [label="clang::BreakStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1BreakStmt.html",tooltip="BreakStmt - This represents a break."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="clang::CapturedStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CapturedStmt.html",tooltip="This captures a statement into a function."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="clang::CompoundStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CompoundStmt.html",tooltip="CompoundStmt - This represents a group of statements like { stmt stmt }."];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="clang::ContinueStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ContinueStmt.html",tooltip="ContinueStmt - This represents a continue."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="clang::CoreturnStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CoreturnStmt.html",tooltip="Represents a 'co_return' statement in the C++ Coroutines TS."];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="clang::CoroutineBodyStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CoroutineBodyStmt.html",tooltip="Represents the body of a coroutine."];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="clang::CXXCatchStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXCatchStmt.html",tooltip="CXXCatchStmt - This represents a C++ catch block."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="clang::CXXForRangeStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXForRangeStmt.html",tooltip="CXXForRangeStmt - This represents C++0x [stmt.ranged]'s ranged for statement, represented as 'for (ra..."];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="clang::CXXTryStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1CXXTryStmt.html",tooltip="CXXTryStmt - A C++ try block, including all handlers."];
  Node1 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="clang::DeclStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1DeclStmt.html",tooltip="DeclStmt - Adaptor class for mixing declarations with statements and expressions."];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="clang::DoStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1DoStmt.html",tooltip="DoStmt - This represents a 'do/while' stmt."];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="clang::ForStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ForStmt.html",tooltip="ForStmt - This represents a 'for (init;cond;inc)' stmt."];
  Node1 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="clang::GotoStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1GotoStmt.html",tooltip="GotoStmt - This represents a direct goto."];
  Node1 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="clang::IfStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1IfStmt.html",tooltip="IfStmt - This represents an if/then/else."];
  Node1 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="clang::IndirectGotoStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1IndirectGotoStmt.html",tooltip="IndirectGotoStmt - This represents an indirect goto."];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="clang::MSDependentExistsStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1MSDependentExistsStmt.html",tooltip="Representation of a Microsoft __if_exists or __if_not_exists statement with a dependent name."];
  Node1 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="clang::NullStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1NullStmt.html",tooltip="NullStmt - This is the null statement \";\": C99 6.8.3p3."];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="clang::ObjCAtCatchStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCAtCatchStmt.html",tooltip="Represents Objective-C's @catch statement."];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="clang::ObjCAtFinallyStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCAtFinallyStmt.html",tooltip="Represents Objective-C's @finally statement."];
  Node1 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="clang::ObjCAtSynchronizedStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCAtSynchronizedStmt.html",tooltip="Represents Objective-C's @synchronized statement."];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="clang::ObjCAtThrowStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCAtThrowStmt.html",tooltip="Represents Objective-C's @throw statement."];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="clang::ObjCAtTryStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCAtTryStmt.html",tooltip="Represents Objective-C's @try ... @catch ... @finally statement."];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="clang::ObjCAutoreleasePoolStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCAutoreleasePoolStmt.html",tooltip="Represents Objective-C's @autoreleasepool Statement."];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="clang::ObjCForCollectionStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ObjCForCollectionStmt.html",tooltip="Represents Objective-C's collection statement."];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="clang::OMPCanonicalLoop",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPCanonicalLoop.html",tooltip="Representation of an OpenMP canonical loop."];
  Node1 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="clang::OMPExecutableDirective",height=0.2,width=0.4,color="red",URL="$classclang_1_1OMPExecutableDirective.html",tooltip="This is a basic class for representing single OpenMP executable directive."];
  Node30 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node31 [label="clang::OMPAtomicDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPAtomicDirective.html",tooltip="This represents '#pragma omp atomic' directive."];
  Node30 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node32 [label="clang::OMPBarrierDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPBarrierDirective.html",tooltip="This represents '#pragma omp barrier' directive."];
  Node30 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node33 [label="clang::OMPCancelDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPCancelDirective.html",tooltip="This represents '#pragma omp cancel' directive."];
  Node30 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node34 [label="clang::OMPCancellationPoint\lDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPCancellationPointDirective.html",tooltip="This represents '#pragma omp cancellation point' directive."];
  Node30 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node35 [label="clang::OMPCriticalDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPCriticalDirective.html",tooltip="This represents '#pragma omp critical' directive."];
  Node30 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node36 [label="clang::OMPDepobjDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPDepobjDirective.html",tooltip="This represents '#pragma omp depobj' directive."];
  Node30 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node37 [label="clang::OMPDispatchDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPDispatchDirective.html",tooltip="This represents '#pragma omp dispatch' directive."];
  Node30 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node38 [label="clang::OMPErrorDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPErrorDirective.html",tooltip="This represents '#pragma omp error' directive."];
  Node30 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node39 [label="clang::OMPFlushDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPFlushDirective.html",tooltip="This represents '#pragma omp flush' directive."];
  Node30 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node40 [label="clang::OMPInteropDirective",height=0.2,width=0.4,color="black",URL="$classclang_1_1OMPInteropDirective.html",tooltip="This represents '#pragma omp interop' directive."];
  Node1 -> Node105 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node105 [label="clang::ReturnStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1ReturnStmt.html",tooltip="ReturnStmt - This represents a return, optionally of an expression: return; return 4;."];
  Node1 -> Node106 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node106 [label="clang::SEHExceptStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1SEHExceptStmt.html",tooltip=" "];
  Node1 -> Node107 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node107 [label="clang::SEHFinallyStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1SEHFinallyStmt.html",tooltip=" "];
  Node1 -> Node108 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node108 [label="clang::SEHLeaveStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1SEHLeaveStmt.html",tooltip="Represents a __leave statement."];
  Node1 -> Node109 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node109 [label="clang::SEHTryStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1SEHTryStmt.html",tooltip=" "];
  Node1 -> Node110 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node110 [label="clang::SwitchCase",height=0.2,width=0.4,color="red",URL="$classclang_1_1SwitchCase.html",tooltip=" "];
  Node1 -> Node113 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node113 [label="clang::SwitchStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1SwitchStmt.html",tooltip="SwitchStmt - This represents a 'switch' stmt."];
  Node1 -> Node114 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node114 [label="clang::ValueStmt",height=0.2,width=0.4,color="red",URL="$classclang_1_1ValueStmt.html",tooltip="Represents a statement that could possibly have a value and type."];
  Node1 -> Node249 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node249 [label="clang::WhileStmt",height=0.2,width=0.4,color="black",URL="$classclang_1_1WhileStmt.html",tooltip="WhileStmt - This represents a 'while' stmt."];
}
